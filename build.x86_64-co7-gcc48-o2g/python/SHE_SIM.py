# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SHE_SIM', [dirname(__file__)])
        except ImportError:
            import _SHE_SIM
            return _SHE_SIM
        if fp is not None:
            try:
                _mod = imp.load_module('_SHE_SIM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SHE_SIM = swig_import_helper()
    del swig_import_helper
else:
    import _SHE_SIM
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SHE_SIM.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _SHE_SIM.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SHE_SIM.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SHE_SIM.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SHE_SIM.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SHE_SIM.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SHE_SIM.SwigPyIterator_copy(self)

    def next(self):
        return _SHE_SIM.SwigPyIterator_next(self)

    def __next__(self):
        return _SHE_SIM.SwigPyIterator___next__(self)

    def previous(self):
        return _SHE_SIM.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SHE_SIM.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SHE_SIM.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SHE_SIM.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SHE_SIM.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SHE_SIM.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SHE_SIM.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SHE_SIM.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SHE_SIM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ParamHierarchyLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamHierarchyLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParamHierarchyLevel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SHE_SIM.delete_ParamHierarchyLevel
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.ParamHierarchyLevel_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.ParamHierarchyLevel_get_name(self)

    def num_children(self):
        return _SHE_SIM.ParamHierarchyLevel_num_children(self)

    def get_parent(self, *args):
        return _SHE_SIM.ParamHierarchyLevel_get_parent(self, *args)

    def clear_children(self):
        return _SHE_SIM.ParamHierarchyLevel_clear_children(self)

    def get_children(self, *args):
        return _SHE_SIM.ParamHierarchyLevel_get_children(self, *args)

    def get_descendants(self, *args):
        return _SHE_SIM.ParamHierarchyLevel_get_descendants(self, *args)

    def get_child(self, *args):
        return _SHE_SIM.ParamHierarchyLevel_get_child(self, *args)

    def adopt_child(self, p_child):
        return _SHE_SIM.ParamHierarchyLevel_adopt_child(self, p_child)

    def fill_children(self):
        return _SHE_SIM.ParamHierarchyLevel_fill_children(self)

    def autofill_children(self):
        return _SHE_SIM.ParamHierarchyLevel_autofill_children(self)

    def get_image_groups(self):
        return _SHE_SIM.ParamHierarchyLevel_get_image_groups(self)

    def get_images(self):
        return _SHE_SIM.ParamHierarchyLevel_get_images(self)

    def get_cluster_groups(self):
        return _SHE_SIM.ParamHierarchyLevel_get_cluster_groups(self)

    def get_clusters(self):
        return _SHE_SIM.ParamHierarchyLevel_get_clusters(self)

    def get_field_groups(self):
        return _SHE_SIM.ParamHierarchyLevel_get_field_groups(self)

    def get_fields(self):
        return _SHE_SIM.ParamHierarchyLevel_get_fields(self)

    def get_galaxy_groups(self):
        return _SHE_SIM.ParamHierarchyLevel_get_galaxy_groups(self)

    def get_galaxies(self):
        return _SHE_SIM.ParamHierarchyLevel_get_galaxies(self)

    def get_background_galaxies(self):
        return _SHE_SIM.ParamHierarchyLevel_get_background_galaxies(self)

    def get_foreground_galaxies(self):
        return _SHE_SIM.ParamHierarchyLevel_get_foreground_galaxies(self)

    def get_central_galaxy(self):
        return _SHE_SIM.ParamHierarchyLevel_get_central_galaxy(self)

    def get_field_galaxies(self):
        return _SHE_SIM.ParamHierarchyLevel_get_field_galaxies(self)

    def get_satellite_galaxies(self):
        return _SHE_SIM.ParamHierarchyLevel_get_satellite_galaxies(self)

    def get_image_group_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_image_group_descendants(self)

    def get_image_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_image_descendants(self)

    def get_cluster_group_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_cluster_group_descendants(self)

    def get_cluster_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_cluster_descendants(self)

    def get_field_group_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_field_group_descendants(self)

    def get_field_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_field_descendants(self)

    def get_galaxy_group_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_galaxy_group_descendants(self)

    def get_galaxy_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_galaxy_descendants(self)

    def get_background_galaxy_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_background_galaxy_descendants(self)

    def get_foreground_galaxy_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_foreground_galaxy_descendants(self)

    def get_central_galaxy_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_central_galaxy_descendants(self)

    def get_field_galaxy_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_field_galaxy_descendants(self)

    def get_satellite_galaxy_descendants(self):
        return _SHE_SIM.ParamHierarchyLevel_get_satellite_galaxy_descendants(self)

    def get_param(self, *args):
        return _SHE_SIM.ParamHierarchyLevel_get_param(self, *args)

    def get_param_value(self, name):
        return _SHE_SIM.ParamHierarchyLevel_get_param_value(self, name)

    def get_generation_level(self, name):
        return _SHE_SIM.ParamHierarchyLevel_get_generation_level(self, name)

    def get_p_generation_level(self, name):
        return _SHE_SIM.ParamHierarchyLevel_get_p_generation_level(self, name)

    def set_generation_level(self, name, level):
        return _SHE_SIM.ParamHierarchyLevel_set_generation_level(self, name, level)

    def set_p_generation_level(self, name, p_level):
        return _SHE_SIM.ParamHierarchyLevel_set_p_generation_level(self, name, p_level)

    def get_p_param_params(self, name):
        return _SHE_SIM.ParamHierarchyLevel_get_p_param_params(self, name)

    def set_p_param_params(self, name, params):
        return _SHE_SIM.ParamHierarchyLevel_set_p_param_params(self, name, params)

    def generate_parameters(self):
        return _SHE_SIM.ParamHierarchyLevel_generate_parameters(self)

    def get_local_ID(self):
        return _SHE_SIM.ParamHierarchyLevel_get_local_ID(self)

    def get_full_ID(self):
        return _SHE_SIM.ParamHierarchyLevel_get_full_ID(self)

    def get_ID_seq(self):
        return _SHE_SIM.ParamHierarchyLevel_get_ID_seq(self)

    def clear(self):
        return _SHE_SIM.ParamHierarchyLevel_clear(self)

    def get_seed(self):
        return _SHE_SIM.ParamHierarchyLevel_get_seed(self)

    def get_full_seed(self):
        return _SHE_SIM.ParamHierarchyLevel_get_full_seed(self)

    def set_seed(self, *args):
        return _SHE_SIM.ParamHierarchyLevel_set_seed(self, *args)

    def clone(self):
        return _SHE_SIM.ParamHierarchyLevel_clone(self)

    def set_param_params(self, *args):
        return _SHE_SIM.ParamHierarchyLevel_set_param_params(self, *args)
ParamHierarchyLevel_swigregister = _SHE_SIM.ParamHierarchyLevel_swigregister
ParamHierarchyLevel_swigregister(ParamHierarchyLevel)

class Cluster(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cluster, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cluster, name)
    __repr__ = _swig_repr

    def __init__(self, parent=0):
        this = _SHE_SIM.new_Cluster(parent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_Cluster
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.Cluster_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.Cluster_get_name(self)

    def add_galaxy_group(self):
        return _SHE_SIM.Cluster_add_galaxy_group(self)

    def add_galaxy_groups(self, N):
        return _SHE_SIM.Cluster_add_galaxy_groups(self, N)

    def add_galaxy(self):
        return _SHE_SIM.Cluster_add_galaxy(self)

    def add_galaxies(self, N):
        return _SHE_SIM.Cluster_add_galaxies(self, N)

    def add_central_galaxy(self):
        return _SHE_SIM.Cluster_add_central_galaxy(self)

    def add_satellite_galaxy(self):
        return _SHE_SIM.Cluster_add_satellite_galaxy(self)

    def add_satellite_galaxies(self, N):
        return _SHE_SIM.Cluster_add_satellite_galaxies(self, N)

    def fill_children(self):
        return _SHE_SIM.Cluster_fill_children(self)

    def fill_galaxies(self):
        return _SHE_SIM.Cluster_fill_galaxies(self)

    def clone(self):
        return _SHE_SIM.Cluster_clone(self)
Cluster_swigregister = _SHE_SIM.Cluster_swigregister
Cluster_swigregister(Cluster)

class ClusterGroup(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterGroup, name)
    __repr__ = _swig_repr

    def __init__(self, parent=0):
        this = _SHE_SIM.new_ClusterGroup(parent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_ClusterGroup
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.ClusterGroup_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.ClusterGroup_get_name(self)

    def add_cluster(self):
        return _SHE_SIM.ClusterGroup_add_cluster(self)

    def add_clusters(self, N):
        return _SHE_SIM.ClusterGroup_add_clusters(self, N)

    def clone(self):
        return _SHE_SIM.ClusterGroup_clone(self)
ClusterGroup_swigregister = _SHE_SIM.ClusterGroup_swigregister
ClusterGroup_swigregister(ClusterGroup)

class Field(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr

    def __init__(self, parent=0):
        this = _SHE_SIM.new_Field(parent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_Field
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.Field_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.Field_get_name(self)

    def add_galaxy_group(self):
        return _SHE_SIM.Field_add_galaxy_group(self)

    def add_galaxy_groups(self, N):
        return _SHE_SIM.Field_add_galaxy_groups(self, N)

    def add_galaxy(self):
        return _SHE_SIM.Field_add_galaxy(self)

    def add_galaxies(self, N):
        return _SHE_SIM.Field_add_galaxies(self, N)

    def fill_children(self):
        return _SHE_SIM.Field_fill_children(self)

    def fill_galaxies(self):
        return _SHE_SIM.Field_fill_galaxies(self)

    def clone(self):
        return _SHE_SIM.Field_clone(self)
Field_swigregister = _SHE_SIM.Field_swigregister
Field_swigregister(Field)

class FieldGroup(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldGroup, name)
    __repr__ = _swig_repr

    def __init__(self, parent=0):
        this = _SHE_SIM.new_FieldGroup(parent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_FieldGroup
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.FieldGroup_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.FieldGroup_get_name(self)

    def add_field(self):
        return _SHE_SIM.FieldGroup_add_field(self)

    def add_fields(self, N):
        return _SHE_SIM.FieldGroup_add_fields(self, N)

    def clone(self):
        return _SHE_SIM.FieldGroup_clone(self)
FieldGroup_swigregister = _SHE_SIM.FieldGroup_swigregister
FieldGroup_swigregister(FieldGroup)

class Galaxy(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Galaxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Galaxy, name)
    __repr__ = _swig_repr

    def __init__(self, parent=0):
        this = _SHE_SIM.new_Galaxy(parent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_Galaxy
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.Galaxy_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.Galaxy_get_name(self)

    def set_as_background_galaxy(self):
        return _SHE_SIM.Galaxy_set_as_background_galaxy(self)

    def is_background_galaxy(self):
        return _SHE_SIM.Galaxy_is_background_galaxy(self)

    def set_as_foreground_galaxy(self):
        return _SHE_SIM.Galaxy_set_as_foreground_galaxy(self)

    def is_foreground_galaxy(self):
        return _SHE_SIM.Galaxy_is_foreground_galaxy(self)

    def is_central_galaxy(self):
        return _SHE_SIM.Galaxy_is_central_galaxy(self)

    def is_field_galaxy(self):
        return _SHE_SIM.Galaxy_is_field_galaxy(self)

    def is_satellite_galaxy(self):
        return _SHE_SIM.Galaxy_is_satellite_galaxy(self)

    def clone(self):
        return _SHE_SIM.Galaxy_clone(self)
Galaxy_swigregister = _SHE_SIM.Galaxy_swigregister
Galaxy_swigregister(Galaxy)

class GalaxyGroup(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalaxyGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GalaxyGroup, name)
    __repr__ = _swig_repr

    def __init__(self, parent=0):
        this = _SHE_SIM.new_GalaxyGroup(parent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_GalaxyGroup
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.GalaxyGroup_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.GalaxyGroup_get_name(self)

    def add_galaxy(self):
        return _SHE_SIM.GalaxyGroup_add_galaxy(self)

    def add_galaxies(self, N):
        return _SHE_SIM.GalaxyGroup_add_galaxies(self, N)

    def clone(self):
        return _SHE_SIM.GalaxyGroup_clone(self)
GalaxyGroup_swigregister = _SHE_SIM.GalaxyGroup_swigregister
GalaxyGroup_swigregister(GalaxyGroup)

class Image(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr

    def __init__(self, parent=0):
        this = _SHE_SIM.new_Image(parent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_Image
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.Image_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.Image_get_name(self)

    def add_cluster_group(self):
        return _SHE_SIM.Image_add_cluster_group(self)

    def add_cluster_groups(self, N):
        return _SHE_SIM.Image_add_cluster_groups(self, N)

    def add_cluster(self):
        return _SHE_SIM.Image_add_cluster(self)

    def add_clusters(self, N):
        return _SHE_SIM.Image_add_clusters(self, N)

    def add_field_group(self):
        return _SHE_SIM.Image_add_field_group(self)

    def add_field_groups(self, N):
        return _SHE_SIM.Image_add_field_groups(self, N)

    def add_field(self):
        return _SHE_SIM.Image_add_field(self)

    def add_fields(self, N):
        return _SHE_SIM.Image_add_fields(self, N)

    def add_galaxy_group(self):
        return _SHE_SIM.Image_add_galaxy_group(self)

    def add_galaxy_groups(self, N):
        return _SHE_SIM.Image_add_galaxy_groups(self, N)

    def add_galaxy(self):
        return _SHE_SIM.Image_add_galaxy(self)

    def add_galaxies(self, N):
        return _SHE_SIM.Image_add_galaxies(self, N)

    def add_background_galaxy(self):
        return _SHE_SIM.Image_add_background_galaxy(self)

    def add_background_galaxies(self, N):
        return _SHE_SIM.Image_add_background_galaxies(self, N)

    def add_foreground_galaxy(self):
        return _SHE_SIM.Image_add_foreground_galaxy(self)

    def add_foreground_galaxies(self, N):
        return _SHE_SIM.Image_add_foreground_galaxies(self, N)

    def fill_children(self):
        return _SHE_SIM.Image_fill_children(self)

    def fill_clusters(self):
        return _SHE_SIM.Image_fill_clusters(self)

    def autofill_clusters(self):
        return _SHE_SIM.Image_autofill_clusters(self)

    def fill_field(self):
        return _SHE_SIM.Image_fill_field(self)

    def autofill_field(self):
        return _SHE_SIM.Image_autofill_field(self)

    def clone(self):
        return _SHE_SIM.Image_clone(self)
Image_swigregister = _SHE_SIM.Image_swigregister
Image_swigregister(Image)

class ImageGroup(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageGroup, name)
    __repr__ = _swig_repr

    def __init__(self, parent=0):
        this = _SHE_SIM.new_ImageGroup(parent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_ImageGroup
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.ImageGroup_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.ImageGroup_get_name(self)

    def add_image(self):
        return _SHE_SIM.ImageGroup_add_image(self)

    def add_images(self, N):
        return _SHE_SIM.ImageGroup_add_images(self, N)

    def clone(self):
        return _SHE_SIM.ImageGroup_clone(self)
ImageGroup_swigregister = _SHE_SIM.ImageGroup_swigregister
ImageGroup_swigregister(ImageGroup)

class Survey(ParamHierarchyLevel):
    __swig_setmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Survey, name, value)
    __swig_getmethods__ = {}
    for _s in [ParamHierarchyLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Survey, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SHE_SIM.new_Survey()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SHE_SIM.delete_Survey
    __del__ = lambda self: None

    def get_hierarchy_level(self):
        return _SHE_SIM.Survey_get_hierarchy_level(self)

    def get_name(self):
        return _SHE_SIM.Survey_get_name(self)

    def add_image_group(self):
        return _SHE_SIM.Survey_add_image_group(self)

    def add_image_groups(self, N):
        return _SHE_SIM.Survey_add_image_groups(self, N)

    def add_image(self):
        return _SHE_SIM.Survey_add_image(self)

    def add_images(self, N):
        return _SHE_SIM.Survey_add_images(self, N)

    def fill_children(self):
        return _SHE_SIM.Survey_fill_children(self)

    def fill_images(self):
        return _SHE_SIM.Survey_fill_images(self)

    def autofill_images(self):
        return _SHE_SIM.Survey_autofill_images(self)

    def clone(self):
        return _SHE_SIM.Survey_clone(self)
Survey_swigregister = _SHE_SIM.Survey_swigregister
Survey_swigregister(Survey)


def get_distance_from_angle(theta_arcsec, z):
    return _SHE_SIM.get_distance_from_angle(theta_arcsec, z)
get_distance_from_angle = _SHE_SIM.get_distance_from_angle

def get_angle_from_distance(d_kpc, z):
    return _SHE_SIM.get_angle_from_distance(d_kpc, z)
get_angle_from_distance = _SHE_SIM.get_angle_from_distance

def get_relative_luminosity_distance(z1, z2):
    return _SHE_SIM.get_relative_luminosity_distance(z1, z2)
get_relative_luminosity_distance = _SHE_SIM.get_relative_luminosity_distance

def get_apparent_magnitude_at_other_redshift(mag1, z1, z2):
    return _SHE_SIM.get_apparent_magnitude_at_other_redshift(mag1, z1, z2)
get_apparent_magnitude_at_other_redshift = _SHE_SIM.get_apparent_magnitude_at_other_redshift
class PHLVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHLVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHLVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.PHLVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.PHLVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.PHLVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.PHLVector___len__(self)

    def pop(self):
        return _SHE_SIM.PHLVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.PHLVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.PHLVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.PHLVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.PHLVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.PHLVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.PHLVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.PHLVector_append(self, x)

    def empty(self):
        return _SHE_SIM.PHLVector_empty(self)

    def size(self):
        return _SHE_SIM.PHLVector_size(self)

    def clear(self):
        return _SHE_SIM.PHLVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.PHLVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.PHLVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.PHLVector_begin(self)

    def end(self):
        return _SHE_SIM.PHLVector_end(self)

    def rbegin(self):
        return _SHE_SIM.PHLVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.PHLVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.PHLVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.PHLVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_PHLVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.PHLVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.PHLVector_front(self)

    def back(self):
        return _SHE_SIM.PHLVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.PHLVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.PHLVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.PHLVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.PHLVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.PHLVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_PHLVector
    __del__ = lambda self: None
PHLVector_swigregister = _SHE_SIM.PHLVector_swigregister
PHLVector_swigregister(PHLVector)
cvar = _SHE_SIM.cvar
Omega_m = cvar.Omega_m
Omega_r = cvar.Omega_r
Omega_k = cvar.Omega_k
Omega_l = cvar.Omega_l
Omega_b = cvar.Omega_b

class ClusterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.ClusterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.ClusterVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.ClusterVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.ClusterVector___len__(self)

    def pop(self):
        return _SHE_SIM.ClusterVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.ClusterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.ClusterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.ClusterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.ClusterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.ClusterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.ClusterVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.ClusterVector_append(self, x)

    def empty(self):
        return _SHE_SIM.ClusterVector_empty(self)

    def size(self):
        return _SHE_SIM.ClusterVector_size(self)

    def clear(self):
        return _SHE_SIM.ClusterVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.ClusterVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.ClusterVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.ClusterVector_begin(self)

    def end(self):
        return _SHE_SIM.ClusterVector_end(self)

    def rbegin(self):
        return _SHE_SIM.ClusterVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.ClusterVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.ClusterVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.ClusterVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_ClusterVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.ClusterVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.ClusterVector_front(self)

    def back(self):
        return _SHE_SIM.ClusterVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.ClusterVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.ClusterVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.ClusterVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.ClusterVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.ClusterVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_ClusterVector
    __del__ = lambda self: None
ClusterVector_swigregister = _SHE_SIM.ClusterVector_swigregister
ClusterVector_swigregister(ClusterVector)

class ClusterGroupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterGroupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterGroupVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.ClusterGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.ClusterGroupVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.ClusterGroupVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.ClusterGroupVector___len__(self)

    def pop(self):
        return _SHE_SIM.ClusterGroupVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.ClusterGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.ClusterGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.ClusterGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.ClusterGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.ClusterGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.ClusterGroupVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.ClusterGroupVector_append(self, x)

    def empty(self):
        return _SHE_SIM.ClusterGroupVector_empty(self)

    def size(self):
        return _SHE_SIM.ClusterGroupVector_size(self)

    def clear(self):
        return _SHE_SIM.ClusterGroupVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.ClusterGroupVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.ClusterGroupVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.ClusterGroupVector_begin(self)

    def end(self):
        return _SHE_SIM.ClusterGroupVector_end(self)

    def rbegin(self):
        return _SHE_SIM.ClusterGroupVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.ClusterGroupVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.ClusterGroupVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.ClusterGroupVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_ClusterGroupVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.ClusterGroupVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.ClusterGroupVector_front(self)

    def back(self):
        return _SHE_SIM.ClusterGroupVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.ClusterGroupVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.ClusterGroupVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.ClusterGroupVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.ClusterGroupVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.ClusterGroupVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_ClusterGroupVector
    __del__ = lambda self: None
ClusterGroupVector_swigregister = _SHE_SIM.ClusterGroupVector_swigregister
ClusterGroupVector_swigregister(ClusterGroupVector)

class FieldVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.FieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.FieldVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.FieldVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.FieldVector___len__(self)

    def pop(self):
        return _SHE_SIM.FieldVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.FieldVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.FieldVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.FieldVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.FieldVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.FieldVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.FieldVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.FieldVector_append(self, x)

    def empty(self):
        return _SHE_SIM.FieldVector_empty(self)

    def size(self):
        return _SHE_SIM.FieldVector_size(self)

    def clear(self):
        return _SHE_SIM.FieldVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.FieldVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.FieldVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.FieldVector_begin(self)

    def end(self):
        return _SHE_SIM.FieldVector_end(self)

    def rbegin(self):
        return _SHE_SIM.FieldVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.FieldVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.FieldVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.FieldVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_FieldVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.FieldVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.FieldVector_front(self)

    def back(self):
        return _SHE_SIM.FieldVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.FieldVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.FieldVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.FieldVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.FieldVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.FieldVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_FieldVector
    __del__ = lambda self: None
FieldVector_swigregister = _SHE_SIM.FieldVector_swigregister
FieldVector_swigregister(FieldVector)

class FieldGroupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldGroupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldGroupVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.FieldGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.FieldGroupVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.FieldGroupVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.FieldGroupVector___len__(self)

    def pop(self):
        return _SHE_SIM.FieldGroupVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.FieldGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.FieldGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.FieldGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.FieldGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.FieldGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.FieldGroupVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.FieldGroupVector_append(self, x)

    def empty(self):
        return _SHE_SIM.FieldGroupVector_empty(self)

    def size(self):
        return _SHE_SIM.FieldGroupVector_size(self)

    def clear(self):
        return _SHE_SIM.FieldGroupVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.FieldGroupVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.FieldGroupVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.FieldGroupVector_begin(self)

    def end(self):
        return _SHE_SIM.FieldGroupVector_end(self)

    def rbegin(self):
        return _SHE_SIM.FieldGroupVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.FieldGroupVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.FieldGroupVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.FieldGroupVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_FieldGroupVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.FieldGroupVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.FieldGroupVector_front(self)

    def back(self):
        return _SHE_SIM.FieldGroupVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.FieldGroupVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.FieldGroupVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.FieldGroupVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.FieldGroupVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.FieldGroupVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_FieldGroupVector
    __del__ = lambda self: None
FieldGroupVector_swigregister = _SHE_SIM.FieldGroupVector_swigregister
FieldGroupVector_swigregister(FieldGroupVector)

class GalaxyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalaxyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GalaxyVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.GalaxyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.GalaxyVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.GalaxyVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.GalaxyVector___len__(self)

    def pop(self):
        return _SHE_SIM.GalaxyVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.GalaxyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.GalaxyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.GalaxyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.GalaxyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.GalaxyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.GalaxyVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.GalaxyVector_append(self, x)

    def empty(self):
        return _SHE_SIM.GalaxyVector_empty(self)

    def size(self):
        return _SHE_SIM.GalaxyVector_size(self)

    def clear(self):
        return _SHE_SIM.GalaxyVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.GalaxyVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.GalaxyVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.GalaxyVector_begin(self)

    def end(self):
        return _SHE_SIM.GalaxyVector_end(self)

    def rbegin(self):
        return _SHE_SIM.GalaxyVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.GalaxyVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.GalaxyVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.GalaxyVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_GalaxyVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.GalaxyVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.GalaxyVector_front(self)

    def back(self):
        return _SHE_SIM.GalaxyVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.GalaxyVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.GalaxyVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.GalaxyVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.GalaxyVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.GalaxyVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_GalaxyVector
    __del__ = lambda self: None
GalaxyVector_swigregister = _SHE_SIM.GalaxyVector_swigregister
GalaxyVector_swigregister(GalaxyVector)

class GalaxyGroupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalaxyGroupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GalaxyGroupVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.GalaxyGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.GalaxyGroupVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.GalaxyGroupVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.GalaxyGroupVector___len__(self)

    def pop(self):
        return _SHE_SIM.GalaxyGroupVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.GalaxyGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.GalaxyGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.GalaxyGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.GalaxyGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.GalaxyGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.GalaxyGroupVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.GalaxyGroupVector_append(self, x)

    def empty(self):
        return _SHE_SIM.GalaxyGroupVector_empty(self)

    def size(self):
        return _SHE_SIM.GalaxyGroupVector_size(self)

    def clear(self):
        return _SHE_SIM.GalaxyGroupVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.GalaxyGroupVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.GalaxyGroupVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.GalaxyGroupVector_begin(self)

    def end(self):
        return _SHE_SIM.GalaxyGroupVector_end(self)

    def rbegin(self):
        return _SHE_SIM.GalaxyGroupVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.GalaxyGroupVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.GalaxyGroupVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.GalaxyGroupVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_GalaxyGroupVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.GalaxyGroupVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.GalaxyGroupVector_front(self)

    def back(self):
        return _SHE_SIM.GalaxyGroupVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.GalaxyGroupVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.GalaxyGroupVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.GalaxyGroupVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.GalaxyGroupVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.GalaxyGroupVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_GalaxyGroupVector
    __del__ = lambda self: None
GalaxyGroupVector_swigregister = _SHE_SIM.GalaxyGroupVector_swigregister
GalaxyGroupVector_swigregister(GalaxyGroupVector)

class ImageVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.ImageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.ImageVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.ImageVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.ImageVector___len__(self)

    def pop(self):
        return _SHE_SIM.ImageVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.ImageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.ImageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.ImageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.ImageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.ImageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.ImageVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.ImageVector_append(self, x)

    def empty(self):
        return _SHE_SIM.ImageVector_empty(self)

    def size(self):
        return _SHE_SIM.ImageVector_size(self)

    def clear(self):
        return _SHE_SIM.ImageVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.ImageVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.ImageVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.ImageVector_begin(self)

    def end(self):
        return _SHE_SIM.ImageVector_end(self)

    def rbegin(self):
        return _SHE_SIM.ImageVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.ImageVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.ImageVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.ImageVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_ImageVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.ImageVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.ImageVector_front(self)

    def back(self):
        return _SHE_SIM.ImageVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.ImageVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.ImageVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.ImageVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.ImageVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.ImageVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_ImageVector
    __del__ = lambda self: None
ImageVector_swigregister = _SHE_SIM.ImageVector_swigregister
ImageVector_swigregister(ImageVector)

class ImageGroupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageGroupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageGroupVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SHE_SIM.ImageGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SHE_SIM.ImageGroupVector___nonzero__(self)

    def __bool__(self):
        return _SHE_SIM.ImageGroupVector___bool__(self)

    def __len__(self):
        return _SHE_SIM.ImageGroupVector___len__(self)

    def pop(self):
        return _SHE_SIM.ImageGroupVector_pop(self)

    def __getslice__(self, i, j):
        return _SHE_SIM.ImageGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SHE_SIM.ImageGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SHE_SIM.ImageGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SHE_SIM.ImageGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SHE_SIM.ImageGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SHE_SIM.ImageGroupVector___setitem__(self, *args)

    def append(self, x):
        return _SHE_SIM.ImageGroupVector_append(self, x)

    def empty(self):
        return _SHE_SIM.ImageGroupVector_empty(self)

    def size(self):
        return _SHE_SIM.ImageGroupVector_size(self)

    def clear(self):
        return _SHE_SIM.ImageGroupVector_clear(self)

    def swap(self, v):
        return _SHE_SIM.ImageGroupVector_swap(self, v)

    def get_allocator(self):
        return _SHE_SIM.ImageGroupVector_get_allocator(self)

    def begin(self):
        return _SHE_SIM.ImageGroupVector_begin(self)

    def end(self):
        return _SHE_SIM.ImageGroupVector_end(self)

    def rbegin(self):
        return _SHE_SIM.ImageGroupVector_rbegin(self)

    def rend(self):
        return _SHE_SIM.ImageGroupVector_rend(self)

    def pop_back(self):
        return _SHE_SIM.ImageGroupVector_pop_back(self)

    def erase(self, *args):
        return _SHE_SIM.ImageGroupVector_erase(self, *args)

    def __init__(self, *args):
        this = _SHE_SIM.new_ImageGroupVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SHE_SIM.ImageGroupVector_push_back(self, x)

    def front(self):
        return _SHE_SIM.ImageGroupVector_front(self)

    def back(self):
        return _SHE_SIM.ImageGroupVector_back(self)

    def assign(self, n, x):
        return _SHE_SIM.ImageGroupVector_assign(self, n, x)

    def resize(self, *args):
        return _SHE_SIM.ImageGroupVector_resize(self, *args)

    def insert(self, *args):
        return _SHE_SIM.ImageGroupVector_insert(self, *args)

    def reserve(self, n):
        return _SHE_SIM.ImageGroupVector_reserve(self, n)

    def capacity(self):
        return _SHE_SIM.ImageGroupVector_capacity(self)
    __swig_destroy__ = _SHE_SIM.delete_ImageGroupVector
    __del__ = lambda self: None
ImageGroupVector_swigregister = _SHE_SIM.ImageGroupVector_swigregister
ImageGroupVector_swigregister(ImageGroupVector)

# This file is compatible with both classic and new-style classes.


