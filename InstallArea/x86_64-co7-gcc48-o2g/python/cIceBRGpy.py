# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cIceBRGpy', [dirname(__file__)])
        except ImportError:
            import _cIceBRGpy
            return _cIceBRGpy
        if fp is not None:
            try:
                _mod = imp.load_module('_cIceBRGpy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cIceBRGpy = swig_import_helper()
    del swig_import_helper
else:
    import _cIceBRGpy
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cIceBRGpy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cIceBRGpy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cIceBRGpy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cIceBRGpy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cIceBRGpy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cIceBRGpy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cIceBRGpy.SwigPyIterator_copy(self)

    def next(self):
        return _cIceBRGpy.SwigPyIterator_next(self)

    def __next__(self):
        return _cIceBRGpy.SwigPyIterator___next__(self)

    def previous(self):
        return _cIceBRGpy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cIceBRGpy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cIceBRGpy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cIceBRGpy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cIceBRGpy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cIceBRGpy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cIceBRGpy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cIceBRGpy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cIceBRGpy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def rebin_int(p_image, ss_nx, ss_ny, x_offset=0, y_offset=0, subsampling_factor=5):
    return _cIceBRGpy.rebin_int(p_image, ss_nx, ss_ny, x_offset, y_offset, subsampling_factor)
rebin_int = _cIceBRGpy.rebin_int

def rebin_long(p_image, ss_nx, ss_ny, x_offset=0, y_offset=0, subsampling_factor=5):
    return _cIceBRGpy.rebin_long(p_image, ss_nx, ss_ny, x_offset, y_offset, subsampling_factor)
rebin_long = _cIceBRGpy.rebin_long

def rebin_uint(p_image, ss_nx, ss_ny, x_offset=0, y_offset=0, subsampling_factor=5):
    return _cIceBRGpy.rebin_uint(p_image, ss_nx, ss_ny, x_offset, y_offset, subsampling_factor)
rebin_uint = _cIceBRGpy.rebin_uint

def rebin_ulong(p_image, ss_nx, ss_ny, x_offset=0, y_offset=0, subsampling_factor=5):
    return _cIceBRGpy.rebin_ulong(p_image, ss_nx, ss_ny, x_offset, y_offset, subsampling_factor)
rebin_ulong = _cIceBRGpy.rebin_ulong

def rebin_float(p_image, ss_nx, ss_ny, x_offset=0, y_offset=0, subsampling_factor=5):
    return _cIceBRGpy.rebin_float(p_image, ss_nx, ss_ny, x_offset, y_offset, subsampling_factor)
rebin_float = _cIceBRGpy.rebin_float

def rebin_double(p_image, ss_nx, ss_ny, x_offset=0, y_offset=0, subsampling_factor=5):
    return _cIceBRGpy.rebin_double(p_image, ss_nx, ss_ny, x_offset, y_offset, subsampling_factor)
rebin_double = _cIceBRGpy.rebin_double

def get_abs_mag_B_from_mass(m, z):
    return _cIceBRGpy.get_abs_mag_B_from_mass(m, z)
get_abs_mag_B_from_mass = _cIceBRGpy.get_abs_mag_B_from_mass

def get_mass_from_abs_mag_B(abs_mag, z):
    return _cIceBRGpy.get_mass_from_abs_mag_B(abs_mag, z)
get_mass_from_abs_mag_B = _cIceBRGpy.get_mass_from_abs_mag_B

def get_app_mag_B_from_mass(m, z):
    return _cIceBRGpy.get_app_mag_B_from_mass(m, z)
get_app_mag_B_from_mass = _cIceBRGpy.get_app_mag_B_from_mass

def get_mass_from_app_mag_B(app_mag, z):
    return _cIceBRGpy.get_mass_from_app_mag_B(app_mag, z)
get_mass_from_app_mag_B = _cIceBRGpy.get_mass_from_app_mag_B

def cluster_richness(*args):
    return _cIceBRGpy.cluster_richness(*args)
cluster_richness = _cIceBRGpy.cluster_richness

def min_cluster_mass(*args):
    return _cIceBRGpy.min_cluster_mass(*args)
min_cluster_mass = _cIceBRGpy.min_cluster_mass

def cluster_angular_density_at_z(z):
    return _cIceBRGpy.cluster_angular_density_at_z(z)
cluster_angular_density_at_z = _cIceBRGpy.cluster_angular_density_at_z

def visible_clusters(area, z1=0.1, z2=1.3):
    return _cIceBRGpy.visible_clusters(area, z1, z2)
visible_clusters = _cIceBRGpy.visible_clusters

def integrate_mean_cluster_richness_at_redshift(z):
    return _cIceBRGpy.integrate_mean_cluster_richness_at_redshift(z)
integrate_mean_cluster_richness_at_redshift = _cIceBRGpy.integrate_mean_cluster_richness_at_redshift

def integrate_mean_cluster_richness(z_min, z_max):
    return _cIceBRGpy.integrate_mean_cluster_richness(z_min, z_max)
integrate_mean_cluster_richness = _cIceBRGpy.integrate_mean_cluster_richness

def mean_cluster_richness_at_redshift(z):
    return _cIceBRGpy.mean_cluster_richness_at_redshift(z)
mean_cluster_richness_at_redshift = _cIceBRGpy.mean_cluster_richness_at_redshift

def mean_cluster_richness(z_min, z_max):
    return _cIceBRGpy.mean_cluster_richness(z_min, z_max)
mean_cluster_richness = _cIceBRGpy.mean_cluster_richness

def H(z):
    return _cIceBRGpy.H(z)
H = _cIceBRGpy.H

def rho_bar(z=0.):
    return _cIceBRGpy.rho_bar(z)
rho_bar = _cIceBRGpy.rho_bar

def zfa(a):
    return _cIceBRGpy.zfa(a)
zfa = _cIceBRGpy.zfa

def afz(z):
    return _cIceBRGpy.afz(z)
afz = _cIceBRGpy.afz

def tfz(z):
    return _cIceBRGpy.tfz(z)
tfz = _cIceBRGpy.tfz

def tfa(z):
    return _cIceBRGpy.tfa(z)
tfa = _cIceBRGpy.tfa

def zft(t):
    return _cIceBRGpy.zft(t)
zft = _cIceBRGpy.zft

def aft(t):
    return _cIceBRGpy.aft(t)
aft = _cIceBRGpy.aft

def universe_age(z):
    return _cIceBRGpy.universe_age(z)
universe_age = _cIceBRGpy.universe_age

def integrate_add(*args):
    return _cIceBRGpy.integrate_add(*args)
integrate_add = _cIceBRGpy.integrate_add

def integrate_cmd(*args):
    return _cIceBRGpy.integrate_cmd(*args)
integrate_cmd = _cIceBRGpy.integrate_cmd

def integrate_Ld(*args):
    return _cIceBRGpy.integrate_Ld(*args)
integrate_Ld = _cIceBRGpy.integrate_Ld

def integrate_ltd(*args):
    return _cIceBRGpy.integrate_ltd(*args)
integrate_ltd = _cIceBRGpy.integrate_ltd

def integrate_distance(z1, z2, mode, resolution=10000):
    return _cIceBRGpy.integrate_distance(z1, z2, mode, resolution)
integrate_distance = _cIceBRGpy.integrate_distance

def sigma_crit(z_lens, z_source):
    return _cIceBRGpy.sigma_crit(z_lens, z_source)
sigma_crit = _cIceBRGpy.sigma_crit

def afd(*args):
    return _cIceBRGpy.afd(*args)
afd = _cIceBRGpy.afd

def ad_distance(z1, z2=0):
    return _cIceBRGpy.ad_distance(z1, z2)
ad_distance = _cIceBRGpy.ad_distance

def comoving_distance(z):
    return _cIceBRGpy.comoving_distance(z)
comoving_distance = _cIceBRGpy.comoving_distance

def luminosity_distance(z):
    return _cIceBRGpy.luminosity_distance(z)
luminosity_distance = _cIceBRGpy.luminosity_distance

def comoving_volume_element(z):
    return _cIceBRGpy.comoving_volume_element(z)
comoving_volume_element = _cIceBRGpy.comoving_volume_element

def max_galaxy_abs_mag_B(*args):
    return _cIceBRGpy.max_galaxy_abs_mag_B(*args)
max_galaxy_abs_mag_B = _cIceBRGpy.max_galaxy_abs_mag_B

def galaxy_angular_density_at_z(z):
    return _cIceBRGpy.galaxy_angular_density_at_z(z)
galaxy_angular_density_at_z = _cIceBRGpy.galaxy_angular_density_at_z

def visible_galaxies(area, z1=0.1, z2=2.0):
    return _cIceBRGpy.visible_galaxies(area, z1, z2)
visible_galaxies = _cIceBRGpy.visible_galaxies

def get_abs_mag_from_app_mag(app_mag, z):
    return _cIceBRGpy.get_abs_mag_from_app_mag(app_mag, z)
get_abs_mag_from_app_mag = _cIceBRGpy.get_abs_mag_from_app_mag

def get_app_mag_from_abs_mag(abs_mag, z):
    return _cIceBRGpy.get_app_mag_from_abs_mag(abs_mag, z)
get_app_mag_from_abs_mag = _cIceBRGpy.get_app_mag_from_abs_mag

def differential_luminosity_function(mag_B):
    return _cIceBRGpy.differential_luminosity_function(mag_B)
differential_luminosity_function = _cIceBRGpy.differential_luminosity_function

def integrated_luminosity_function(mag_B_lo, mag_B_hi):
    return _cIceBRGpy.integrated_luminosity_function(mag_B_lo, mag_B_hi)
integrated_luminosity_function = _cIceBRGpy.integrated_luminosity_function

def faint_bright_ratio(*args):
    return _cIceBRGpy.faint_bright_ratio(*args)
faint_bright_ratio = _cIceBRGpy.faint_bright_ratio

def estimate_abs_mag_g_from_stellar_mass(stellar_mass):
    return _cIceBRGpy.estimate_abs_mag_g_from_stellar_mass(stellar_mass)
estimate_abs_mag_g_from_stellar_mass = _cIceBRGpy.estimate_abs_mag_g_from_stellar_mass

def estimate_stellar_mass_from_abs_mag_g(abs_mag_g):
    return _cIceBRGpy.estimate_stellar_mass_from_abs_mag_g(abs_mag_g)
estimate_stellar_mass_from_abs_mag_g = _cIceBRGpy.estimate_stellar_mass_from_abs_mag_g

def estimate_abs_mag_i_from_stellar_mass(stellar_mass):
    return _cIceBRGpy.estimate_abs_mag_i_from_stellar_mass(stellar_mass)
estimate_abs_mag_i_from_stellar_mass = _cIceBRGpy.estimate_abs_mag_i_from_stellar_mass

def estimate_stellar_mass_from_abs_mag_i(abs_mag_g):
    return _cIceBRGpy.estimate_stellar_mass_from_abs_mag_i(abs_mag_g)
estimate_stellar_mass_from_abs_mag_i = _cIceBRGpy.estimate_stellar_mass_from_abs_mag_i

def estimate_abs_mag_g_from_abs_mag_i(abs_mag_i):
    return _cIceBRGpy.estimate_abs_mag_g_from_abs_mag_i(abs_mag_i)
estimate_abs_mag_g_from_abs_mag_i = _cIceBRGpy.estimate_abs_mag_g_from_abs_mag_i

def estimate_abs_mag_i_from_abs_mag_g(abs_mag_g):
    return _cIceBRGpy.estimate_abs_mag_i_from_abs_mag_g(abs_mag_g)
estimate_abs_mag_i_from_abs_mag_g = _cIceBRGpy.estimate_abs_mag_i_from_abs_mag_g

def estimate_abs_mag_vis_from_abs_mag_i(abs_mag_i):
    return _cIceBRGpy.estimate_abs_mag_vis_from_abs_mag_i(abs_mag_i)
estimate_abs_mag_vis_from_abs_mag_i = _cIceBRGpy.estimate_abs_mag_vis_from_abs_mag_i

def estimate_abs_mag_i_from_abs_mag_vis(abs_mag_vis):
    return _cIceBRGpy.estimate_abs_mag_i_from_abs_mag_vis(abs_mag_vis)
estimate_abs_mag_i_from_abs_mag_vis = _cIceBRGpy.estimate_abs_mag_i_from_abs_mag_vis

def estimate_abs_mag_vis_from_stellar_mass(stellar_mass):
    return _cIceBRGpy.estimate_abs_mag_vis_from_stellar_mass(stellar_mass)
estimate_abs_mag_vis_from_stellar_mass = _cIceBRGpy.estimate_abs_mag_vis_from_stellar_mass

def estimate_stellar_mass_from_abs_mag_vis(abs_mag_vis):
    return _cIceBRGpy.estimate_stellar_mass_from_abs_mag_vis(abs_mag_vis)
estimate_stellar_mass_from_abs_mag_vis = _cIceBRGpy.estimate_stellar_mass_from_abs_mag_vis

def estimate_abs_mag_g_from_abs_mag_vis(abs_mag_vis):
    return _cIceBRGpy.estimate_abs_mag_g_from_abs_mag_vis(abs_mag_vis)
estimate_abs_mag_g_from_abs_mag_vis = _cIceBRGpy.estimate_abs_mag_g_from_abs_mag_vis

def estimate_abs_mag_vis_from_abs_mag_g(abs_mag_g):
    return _cIceBRGpy.estimate_abs_mag_vis_from_abs_mag_g(abs_mag_g)
estimate_abs_mag_vis_from_abs_mag_g = _cIceBRGpy.estimate_abs_mag_vis_from_abs_mag_g

def unnormed_power_spectrum(k):
    return _cIceBRGpy.unnormed_power_spectrum(k)
unnormed_power_spectrum = _cIceBRGpy.unnormed_power_spectrum

def delta_c(z=0.):
    return _cIceBRGpy.delta_c(z)
delta_c = _cIceBRGpy.delta_c

def r_of_m(mass):
    return _cIceBRGpy.r_of_m(mass)
r_of_m = _cIceBRGpy.r_of_m

def sigma_of_r(r):
    return _cIceBRGpy.sigma_of_r(r)
sigma_of_r = _cIceBRGpy.sigma_of_r

def sigma_of_m(mass):
    return _cIceBRGpy.sigma_of_m(mass)
sigma_of_m = _cIceBRGpy.sigma_of_m

def nu_of_m(mass, z=0.):
    return _cIceBRGpy.nu_of_m(mass, z)
nu_of_m = _cIceBRGpy.nu_of_m

def mass_function(mass, z=0.):
    return _cIceBRGpy.mass_function(mass, z)
mass_function = _cIceBRGpy.mass_function

def log10_mass_function(log10msun_mass, z=0.):
    return _cIceBRGpy.log10_mass_function(log10msun_mass, z)
log10_mass_function = _cIceBRGpy.log10_mass_function

def integrated_log10_mass_function(l10_m_lo, l10_m_hi, z=0.):
    return _cIceBRGpy.integrated_log10_mass_function(l10_m_lo, l10_m_hi, z)
integrated_log10_mass_function = _cIceBRGpy.integrated_log10_mass_function
class redshift_obj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redshift_obj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redshift_obj, name)
    __repr__ = _swig_repr

    def __init__(self, init_z=0, init_z_err=0):
        this = _cIceBRGpy.new_redshift_obj(init_z, init_z_err)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_redshift_obj
    __del__ = lambda self: None

    def set_z(self, new_z):
        return _cIceBRGpy.redshift_obj_set_z(self, new_z)

    def set_z_err(self, new_z_err):
        return _cIceBRGpy.redshift_obj_set_z_err(self, new_z_err)

    def z(self):
        return _cIceBRGpy.redshift_obj_z(self)

    def z_err(self):
        return _cIceBRGpy.redshift_obj_z_err(self)

    def H(self):
        return _cIceBRGpy.redshift_obj_H(self)

    def rho_crit(self):
        return _cIceBRGpy.redshift_obj_rho_crit(self)

    def redshift_obj_clone(self):
        return _cIceBRGpy.redshift_obj_redshift_obj_clone(self)
redshift_obj_swigregister = _cIceBRGpy.redshift_obj_swigregister
redshift_obj_swigregister(redshift_obj)
cvar = _cIceBRGpy.cvar
mtom = cvar.mtom
mtomm = cvar.mtomm
mmtom = cvar.mmtom
mtocm = cvar.mtocm
cmtom = cvar.cmtom
mtoum = cvar.mtoum
umtom = cvar.umtom
mtonm = cvar.mtonm
nmtom = cvar.nmtom
mtoangstrom = cvar.mtoangstrom
angstromtom = cvar.angstromtom
mtokm = cvar.mtokm
kmtom = cvar.kmtom
ltyrtom = cvar.ltyrtom
mtoltyr = cvar.mtoltyr
AUtom = cvar.AUtom
mtoAU = cvar.mtoAU
pctom = cvar.pctom
mtopc = cvar.mtopc
kpctom = cvar.kpctom
mtokpc = cvar.mtokpc
Mpctom = cvar.Mpctom
mtoMpc = cvar.mtoMpc
mitom = cvar.mitom
mtomi = cvar.mtomi
Mmitom = cvar.Mmitom
mtoMmi = cvar.mtoMmi
fttom = cvar.fttom
mtoft = cvar.mtoft
intom = cvar.intom
mtoin = cvar.mtoin
ydtom = cvar.ydtom
mtoyd = cvar.mtoyd
stos = cvar.stos
stocs = cvar.stocs
cstos = cvar.cstos
stoms = cvar.stoms
mstos = cvar.mstos
stous = cvar.stous
ustos = cvar.ustos
stons = cvar.stons
nstos = cvar.nstos
mintos = cvar.mintos
stomin = cvar.stomin
hrtos = cvar.hrtos
stohr = cvar.stohr
daytos = cvar.daytos
stoday = cvar.stoday
weektos = cvar.weektos
stoweek = cvar.stoweek
yrtos = cvar.yrtos
stoyr = cvar.stoyr
monthtos = cvar.monthtos
stomonth = cvar.stomonth
kyrtos = cvar.kyrtos
stokyr = cvar.stokyr
Myrtos = cvar.Myrtos
stoMyr = cvar.stoMyr
Gyrtos = cvar.Gyrtos
stoGyr = cvar.stoGyr
mpstomps = cvar.mpstomps
mpstokmps = cvar.mpstokmps
kmpstomps = cvar.kmpstomps
ctomps = cvar.ctomps
mpstoc = cvar.mpstoc
mpstomiphr = cvar.mpstomiphr
miphr = cvar.miphr
kgtokg = cvar.kgtokg
kgtogm = cvar.kgtogm
gmtokg = cvar.gmtokg
Mearthtokg = cvar.Mearthtokg
kgtoMearth = cvar.kgtoMearth
Msuntokg = cvar.Msuntokg
kgtoMsun = cvar.kgtoMsun
kgtottMsun = cvar.kgtottMsun
ttMsuntokg = cvar.ttMsuntokg
KtoK = cvar.KtoK
KtodegF = cvar.KtodegF
degCtoK = cvar.degCtoK
KtodegC = cvar.KtodegC
degFtoK = cvar.degFtoK
degCtodegF = cvar.degCtodegF
degFtodegC = cvar.degFtodegC
KtodegR = cvar.KtodegR
degRtoK = cvar.degRtoK
degCtodegR = cvar.degCtodegR
degRtodegC = cvar.degRtodegC
radtorad = cvar.radtorad
degtorad = cvar.degtorad
radtodeg = cvar.radtodeg
degtoamin = cvar.degtoamin
amintodeg = cvar.amintodeg
amintoasec = cvar.amintoasec
asectoamin = cvar.asectoamin
asectodeg = cvar.asectodeg
degtoasec = cvar.degtoasec
amintorad = cvar.amintorad
radtoamin = cvar.radtoamin
asectorad = cvar.asectorad
radtoasec = cvar.radtoasec
CtoC = cvar.CtoC
Ctoesu = cvar.Ctoesu
esutoC = cvar.esutoC
Gc = cvar.Gc
c = cvar.c
t_present_day = cvar.t_present_day
H_0 = cvar.H_0
h_0 = cvar.h_0
Omega_m = cvar.Omega_m
Omega_r = cvar.Omega_r
Omega_k = cvar.Omega_k
Omega_l = cvar.Omega_l
Omega_b = cvar.Omega_b
sigma_8 = cvar.sigma_8
n_s = cvar.n_s
default_c = cvar.default_c
default_tau_factor = cvar.default_tau_factor
bright_abs_mag_i_max = cvar.bright_abs_mag_i_max
faint_app_mag_i_max = cvar.faint_app_mag_i_max
lum_func_min_abs_mag_B = cvar.lum_func_min_abs_mag_B
lum_func_max_abs_mag_B = cvar.lum_func_max_abs_mag_B
mass_func_l10_min = cvar.mass_func_l10_min
mass_func_l10_max = cvar.mass_func_l10_max

class density_profile(redshift_obj):
    __swig_setmethods__ = {}
    for _s in [redshift_obj]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, density_profile, name, value)
    __swig_getmethods__ = {}
    for _s in [redshift_obj]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, density_profile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cIceBRGpy.delete_density_profile
    __del__ = lambda self: None

    def mvir(self):
        return _cIceBRGpy.density_profile_mvir(self)

    def dens(self, r):
        return _cIceBRGpy.density_profile_dens(self, r)

    def density_profile_clone(self):
        return _cIceBRGpy.density_profile_density_profile_clone(self)

    def set_mvir(self, arg2):
        return _cIceBRGpy.density_profile_set_mvir(self, arg2)

    def set_vvir(self, arg2):
        return _cIceBRGpy.density_profile_set_vvir(self, arg2)

    def set_rvir(self, arg2):
        return _cIceBRGpy.density_profile_set_rvir(self, arg2)

    def set_rs(self, arg2):
        return _cIceBRGpy.density_profile_set_rs(self, arg2)

    def set_rt(self, arg2):
        return _cIceBRGpy.density_profile_set_rt(self, arg2)

    def set_parameters(self, arg2):
        return _cIceBRGpy.density_profile_set_parameters(self, arg2)

    def set_tau(self, arg2):
        return _cIceBRGpy.density_profile_set_tau(self, arg2)

    def set_c(self, arg2):
        return _cIceBRGpy.density_profile_set_c(self, arg2)

    def override_rhmvir(self, new_rhmvir):
        return _cIceBRGpy.density_profile_override_rhmvir(self, new_rhmvir)

    def override_rhmtot(self, new_rhmtot):
        return _cIceBRGpy.density_profile_override_rhmtot(self, new_rhmtot)

    def mtot(self):
        return _cIceBRGpy.density_profile_mtot(self)

    def rt(self):
        return _cIceBRGpy.density_profile_rt(self)

    def num_parameters(self):
        return _cIceBRGpy.density_profile_num_parameters(self)

    def get_parameters(self):
        return _cIceBRGpy.density_profile_get_parameters(self)

    def get_parameter_names(self):
        return _cIceBRGpy.density_profile_get_parameter_names(self)

    def enc_mass(self, r):
        return _cIceBRGpy.density_profile_enc_mass(self, r)

    def rvir(self):
        return _cIceBRGpy.density_profile_rvir(self)

    def hmvir(self):
        return _cIceBRGpy.density_profile_hmvir(self)

    def hmtot(self):
        return _cIceBRGpy.density_profile_hmtot(self)

    def hm(self):
        return _cIceBRGpy.density_profile_hm(self)

    def enc_dens(self, r):
        return _cIceBRGpy.density_profile_enc_dens(self, r)

    def rhmvir(self):
        return _cIceBRGpy.density_profile_rhmvir(self)

    def rhmtot(self):
        return _cIceBRGpy.density_profile_rhmtot(self)

    def rhm(self):
        return _cIceBRGpy.density_profile_rhm(self)

    def vvir(self):
        return _cIceBRGpy.density_profile_vvir(self)

    def vhmvir(self):
        return _cIceBRGpy.density_profile_vhmvir(self)

    def vhmtot(self):
        return _cIceBRGpy.density_profile_vhmtot(self)

    def vhm(self):
        return _cIceBRGpy.density_profile_vhm(self)

    def vt(self):
        return _cIceBRGpy.density_profile_vt(self)

    def otvir(self):
        return _cIceBRGpy.density_profile_otvir(self)

    def othmvir(self):
        return _cIceBRGpy.density_profile_othmvir(self)

    def othmtot(self):
        return _cIceBRGpy.density_profile_othmtot(self)

    def othm(self):
        return _cIceBRGpy.density_profile_othm(self)

    def ott(self):
        return _cIceBRGpy.density_profile_ott(self)

    def set_hm_type(self, new_hm_type):
        return _cIceBRGpy.density_profile_set_hm_type(self, new_hm_type)

    def accel(self, r):
        return _cIceBRGpy.density_profile_accel(self, r)

    def Daccel(self, r):
        return _cIceBRGpy.density_profile_Daccel(self, r)

    def truncate_to_fraction(self, arg2):
        return _cIceBRGpy.density_profile_truncate_to_fraction(self, arg2)
density_profile_swigregister = _cIceBRGpy.density_profile_swigregister
density_profile_swigregister(density_profile)
virial_density_factor = cvar.virial_density_factor


def period(host, r, vr, vt=0):
    return _cIceBRGpy.period(host, r, vr, vt)
period = _cIceBRGpy.period
class point_mass_profile(density_profile):
    __swig_setmethods__ = {}
    for _s in [density_profile]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, point_mass_profile, name, value)
    __swig_getmethods__ = {}
    for _s in [density_profile]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, point_mass_profile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cIceBRGpy.new_point_mass_profile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_point_mass_profile
    __del__ = lambda self: None

    def set_mvir(self, new_halo_mass):
        return _cIceBRGpy.point_mass_profile_set_mvir(self, new_halo_mass)

    def set_parameters(self, new_parameters):
        return _cIceBRGpy.point_mass_profile_set_parameters(self, new_parameters)

    def mass(self):
        return _cIceBRGpy.point_mass_profile_mass(self)

    def mvir(self):
        return _cIceBRGpy.point_mass_profile_mvir(self)

    def mtot(self):
        return _cIceBRGpy.point_mass_profile_mtot(self)

    def rvir(self):
        return _cIceBRGpy.point_mass_profile_rvir(self)

    def rt(self):
        return _cIceBRGpy.point_mass_profile_rt(self)

    def rs(self):
        return _cIceBRGpy.point_mass_profile_rs(self)

    def vvir(self):
        return _cIceBRGpy.point_mass_profile_vvir(self)

    def dens(self, r):
        return _cIceBRGpy.point_mass_profile_dens(self, r)

    def enc_dens(self, r):
        return _cIceBRGpy.point_mass_profile_enc_dens(self, r)

    def enc_mass(self, r):
        return _cIceBRGpy.point_mass_profile_enc_mass(self, r)

    def num_parameters(self):
        return _cIceBRGpy.point_mass_profile_num_parameters(self)

    def get_parameters(self):
        return _cIceBRGpy.point_mass_profile_get_parameters(self)

    def get_parameter_names(self):
        return _cIceBRGpy.point_mass_profile_get_parameter_names(self)

    def truncate_to_fraction(self, fraction):
        return _cIceBRGpy.point_mass_profile_truncate_to_fraction(self, fraction)

    def redshift_obj_clone(self):
        return _cIceBRGpy.point_mass_profile_redshift_obj_clone(self)

    def density_profile_clone(self):
        return _cIceBRGpy.point_mass_profile_density_profile_clone(self)

    def point_mass_profile_clone(self):
        return _cIceBRGpy.point_mass_profile_point_mass_profile_clone(self)
point_mass_profile_swigregister = _cIceBRGpy.point_mass_profile_swigregister
point_mass_profile_swigregister(point_mass_profile)

class tNFW_profile(density_profile):
    __swig_setmethods__ = {}
    for _s in [density_profile]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tNFW_profile, name, value)
    __swig_getmethods__ = {}
    for _s in [density_profile]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, tNFW_profile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cIceBRGpy.new_tNFW_profile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_tNFW_profile
    __del__ = lambda self: None

    def set_mvir(self, new_halo_mass=False):
        return _cIceBRGpy.tNFW_profile_set_mvir(self, new_halo_mass)

    def set_parameters(self, new_parameters):
        return _cIceBRGpy.tNFW_profile_set_parameters(self, new_parameters)

    def set_z(self, new_z):
        return _cIceBRGpy.tNFW_profile_set_z(self, new_z)

    def set_tau(self, new_halo_tau):
        return _cIceBRGpy.tNFW_profile_set_tau(self, new_halo_tau)

    def set_c(self, new_halo_c):
        return _cIceBRGpy.tNFW_profile_set_c(self, new_halo_c)

    def mvir(self):
        return _cIceBRGpy.tNFW_profile_mvir(self)

    def mvir0(self):
        return _cIceBRGpy.tNFW_profile_mvir0(self)

    def mtot(self):
        return _cIceBRGpy.tNFW_profile_mtot(self)

    def rvir(self):
        return _cIceBRGpy.tNFW_profile_rvir(self)

    def rvir0(self):
        return _cIceBRGpy.tNFW_profile_rvir0(self)

    def rt(self):
        return _cIceBRGpy.tNFW_profile_rt(self)

    def rs(self):
        return _cIceBRGpy.tNFW_profile_rs(self)

    def vvir(self):
        return _cIceBRGpy.tNFW_profile_vvir(self)

    def vvir0(self):
        return _cIceBRGpy.tNFW_profile_vvir0(self)

    def c(self):
        return _cIceBRGpy.tNFW_profile_c(self)

    def tau(self):
        return _cIceBRGpy.tNFW_profile_tau(self)

    def dens(self, r):
        return _cIceBRGpy.tNFW_profile_dens(self, r)

    def enc_mass(self, r):
        return _cIceBRGpy.tNFW_profile_enc_mass(self, r)

    def num_parameters(self):
        return _cIceBRGpy.tNFW_profile_num_parameters(self)

    def get_parameters(self):
        return _cIceBRGpy.tNFW_profile_get_parameters(self)

    def get_parameter_names(self):
        return _cIceBRGpy.tNFW_profile_get_parameter_names(self)

    def truncate_to_fraction(self, fraction):
        return _cIceBRGpy.tNFW_profile_truncate_to_fraction(self, fraction)

    def redshift_obj_clone(self):
        return _cIceBRGpy.tNFW_profile_redshift_obj_clone(self)

    def density_profile_clone(self):
        return _cIceBRGpy.tNFW_profile_density_profile_clone(self)

    def tNFW_profile_clone(self):
        return _cIceBRGpy.tNFW_profile_tNFW_profile_clone(self)
tNFW_profile_swigregister = _cIceBRGpy.tNFW_profile_swigregister
tNFW_profile_swigregister(tNFW_profile)

class sky_obj(redshift_obj):
    __swig_setmethods__ = {}
    for _s in [redshift_obj]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sky_obj, name, value)
    __swig_getmethods__ = {}
    for _s in [redshift_obj]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, sky_obj, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cIceBRGpy.delete_sky_obj
    __del__ = lambda self: None

    def clear(self):
        return _cIceBRGpy.sky_obj_clear(self)

    def partial_clear(self):
        return _cIceBRGpy.sky_obj_partial_clear(self)

    def set_ra(self, new_ra):
        return _cIceBRGpy.sky_obj_set_ra(self, new_ra)

    def set_dec(self, new_dec):
        return _cIceBRGpy.sky_obj_set_dec(self, new_dec)

    def set_ra_err(self, new_ra_err):
        return _cIceBRGpy.sky_obj_set_ra_err(self, new_ra_err)

    def set_dec_err(self, new_dec_err):
        return _cIceBRGpy.sky_obj_set_dec_err(self, new_dec_err)

    def set_ra_dec(self, new_ra, new_dec):
        return _cIceBRGpy.sky_obj_set_ra_dec(self, new_ra, new_dec)

    def set_ra_dec_z(self, new_ra, new_dec, new_z):
        return _cIceBRGpy.sky_obj_set_ra_dec_z(self, new_ra, new_dec, new_z)

    def set_ra_dec_z_err(self, new_ra, new_dec, new_z, new_ra_err, new_dec_err, new_z_err):
        return _cIceBRGpy.sky_obj_set_ra_dec_z_err(self, new_ra, new_dec, new_z, new_ra_err, new_dec_err, new_z_err)

    def set_ra_dec_err(self, new_ra, new_dec, new_ra_err, new_dec_err):
        return _cIceBRGpy.sky_obj_set_ra_dec_err(self, new_ra, new_dec, new_ra_err, new_dec_err)

    def set_weight(self, new_weight):
        return _cIceBRGpy.sky_obj_set_weight(self, new_weight)

    def set_index(self, new_index):
        return _cIceBRGpy.sky_obj_set_index(self, new_index)

    def set_ID(self, new_ID):
        return _cIceBRGpy.sky_obj_set_ID(self, new_ID)

    def ra(self):
        return _cIceBRGpy.sky_obj_ra(self)

    def dec(self):
        return _cIceBRGpy.sky_obj_dec(self)

    def ra_err(self):
        return _cIceBRGpy.sky_obj_ra_err(self)

    def dec_err(self):
        return _cIceBRGpy.sky_obj_dec_err(self)

    def weight(self):
        return _cIceBRGpy.sky_obj_weight(self)

    def index(self):
        return _cIceBRGpy.sky_obj_index(self)

    def ID(self):
        return _cIceBRGpy.sky_obj_ID(self)

    def m(self):
        return _cIceBRGpy.sky_obj_m(self)

    def mag(self):
        return _cIceBRGpy.sky_obj_mag(self)

    def redshift_obj_clone(self):
        return _cIceBRGpy.sky_obj_redshift_obj_clone(self)

    def sky_obj_clone(self):
        return _cIceBRGpy.sky_obj_sky_obj_clone(self)
sky_obj_swigregister = _cIceBRGpy.sky_obj_swigregister
sky_obj_swigregister(sky_obj)


def dfa(*args):
    return _cIceBRGpy.dfa(*args)
dfa = _cIceBRGpy.dfa

def skydist2d(obj1, obj2):
    return _cIceBRGpy.skydist2d(obj1, obj2)
skydist2d = _cIceBRGpy.skydist2d
class galaxy(sky_obj):
    __swig_setmethods__ = {}
    for _s in [sky_obj]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, galaxy, name, value)
    __swig_getmethods__ = {}
    for _s in [sky_obj]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, galaxy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stellar_mass"] = _cIceBRGpy.galaxy_stellar_mass_set
    __swig_getmethods__["stellar_mass"] = _cIceBRGpy.galaxy_stellar_mass_get
    if _newclass:
        stellar_mass = _swig_property(_cIceBRGpy.galaxy_stellar_mass_get, _cIceBRGpy.galaxy_stellar_mass_set)
    __swig_setmethods__["umag"] = _cIceBRGpy.galaxy_umag_set
    __swig_getmethods__["umag"] = _cIceBRGpy.galaxy_umag_get
    if _newclass:
        umag = _swig_property(_cIceBRGpy.galaxy_umag_get, _cIceBRGpy.galaxy_umag_set)
    __swig_setmethods__["umag_err"] = _cIceBRGpy.galaxy_umag_err_set
    __swig_getmethods__["umag_err"] = _cIceBRGpy.galaxy_umag_err_get
    if _newclass:
        umag_err = _swig_property(_cIceBRGpy.galaxy_umag_err_get, _cIceBRGpy.galaxy_umag_err_set)
    __swig_setmethods__["gmag"] = _cIceBRGpy.galaxy_gmag_set
    __swig_getmethods__["gmag"] = _cIceBRGpy.galaxy_gmag_get
    if _newclass:
        gmag = _swig_property(_cIceBRGpy.galaxy_gmag_get, _cIceBRGpy.galaxy_gmag_set)
    __swig_setmethods__["gmag_err"] = _cIceBRGpy.galaxy_gmag_err_set
    __swig_getmethods__["gmag_err"] = _cIceBRGpy.galaxy_gmag_err_get
    if _newclass:
        gmag_err = _swig_property(_cIceBRGpy.galaxy_gmag_err_get, _cIceBRGpy.galaxy_gmag_err_set)
    __swig_setmethods__["rmag"] = _cIceBRGpy.galaxy_rmag_set
    __swig_getmethods__["rmag"] = _cIceBRGpy.galaxy_rmag_get
    if _newclass:
        rmag = _swig_property(_cIceBRGpy.galaxy_rmag_get, _cIceBRGpy.galaxy_rmag_set)
    __swig_setmethods__["rmag_err"] = _cIceBRGpy.galaxy_rmag_err_set
    __swig_getmethods__["rmag_err"] = _cIceBRGpy.galaxy_rmag_err_get
    if _newclass:
        rmag_err = _swig_property(_cIceBRGpy.galaxy_rmag_err_get, _cIceBRGpy.galaxy_rmag_err_set)
    __swig_setmethods__["imag"] = _cIceBRGpy.galaxy_imag_set
    __swig_getmethods__["imag"] = _cIceBRGpy.galaxy_imag_get
    if _newclass:
        imag = _swig_property(_cIceBRGpy.galaxy_imag_get, _cIceBRGpy.galaxy_imag_set)
    __swig_setmethods__["imag_err"] = _cIceBRGpy.galaxy_imag_err_set
    __swig_getmethods__["imag_err"] = _cIceBRGpy.galaxy_imag_err_get
    if _newclass:
        imag_err = _swig_property(_cIceBRGpy.galaxy_imag_err_get, _cIceBRGpy.galaxy_imag_err_set)
    __swig_setmethods__["zmag"] = _cIceBRGpy.galaxy_zmag_set
    __swig_getmethods__["zmag"] = _cIceBRGpy.galaxy_zmag_get
    if _newclass:
        zmag = _swig_property(_cIceBRGpy.galaxy_zmag_get, _cIceBRGpy.galaxy_zmag_set)
    __swig_setmethods__["zmag_err"] = _cIceBRGpy.galaxy_zmag_err_set
    __swig_getmethods__["zmag_err"] = _cIceBRGpy.galaxy_zmag_err_get
    if _newclass:
        zmag_err = _swig_property(_cIceBRGpy.galaxy_zmag_err_get, _cIceBRGpy.galaxy_zmag_err_set)
    __swig_setmethods__["z_phot"] = _cIceBRGpy.galaxy_z_phot_set
    __swig_getmethods__["z_phot"] = _cIceBRGpy.galaxy_z_phot_get
    if _newclass:
        z_phot = _swig_property(_cIceBRGpy.galaxy_z_phot_get, _cIceBRGpy.galaxy_z_phot_set)
    __swig_setmethods__["z_phot_err"] = _cIceBRGpy.galaxy_z_phot_err_set
    __swig_getmethods__["z_phot_err"] = _cIceBRGpy.galaxy_z_phot_err_get
    if _newclass:
        z_phot_err = _swig_property(_cIceBRGpy.galaxy_z_phot_err_get, _cIceBRGpy.galaxy_z_phot_err_set)
    __swig_setmethods__["odds"] = _cIceBRGpy.galaxy_odds_set
    __swig_getmethods__["odds"] = _cIceBRGpy.galaxy_odds_get
    if _newclass:
        odds = _swig_property(_cIceBRGpy.galaxy_odds_get, _cIceBRGpy.galaxy_odds_set)
    __swig_setmethods__["phot_template"] = _cIceBRGpy.galaxy_phot_template_set
    __swig_getmethods__["phot_template"] = _cIceBRGpy.galaxy_phot_template_get
    if _newclass:
        phot_template = _swig_property(_cIceBRGpy.galaxy_phot_template_get, _cIceBRGpy.galaxy_phot_template_set)
    __swig_setmethods__["host_group"] = _cIceBRGpy.galaxy_host_group_set
    __swig_getmethods__["host_group"] = _cIceBRGpy.galaxy_host_group_get
    if _newclass:
        host_group = _swig_property(_cIceBRGpy.galaxy_host_group_get, _cIceBRGpy.galaxy_host_group_set)
    __swig_setmethods__["host_group_index"] = _cIceBRGpy.galaxy_host_group_index_set
    __swig_getmethods__["host_group_index"] = _cIceBRGpy.galaxy_host_group_index_get
    if _newclass:
        host_group_index = _swig_property(_cIceBRGpy.galaxy_host_group_index_get, _cIceBRGpy.galaxy_host_group_index_set)

    def __init__(self, init_ra=0, init_dec=0, init_z=0, init_ra_err=0, init_dec_err=0, init_z_err=0, init_stellar_mass=0, init_mag=0, init_mag_err=0):
        this = _cIceBRGpy.new_galaxy(init_ra, init_dec, init_z, init_ra_err, init_dec_err, init_z_err, init_stellar_mass, init_mag, init_mag_err)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_galaxy
    __del__ = lambda self: None

    def m(self):
        return _cIceBRGpy.galaxy_m(self)

    def mag(self):
        return _cIceBRGpy.galaxy_mag(self)

    def clear(self):
        return _cIceBRGpy.galaxy_clear(self)

    def redshift_obj_clone(self):
        return _cIceBRGpy.galaxy_redshift_obj_clone(self)

    def sky_obj_clone(self):
        return _cIceBRGpy.galaxy_sky_obj_clone(self)

    def galaxy_clone(self):
        return _cIceBRGpy.galaxy_galaxy_clone(self)
galaxy_swigregister = _cIceBRGpy.galaxy_swigregister
galaxy_swigregister(galaxy)

class pair_bin_summary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_bin_summary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_bin_summary, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cIceBRGpy.new_pair_bin_summary(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_pair_bin_summary
    __del__ = lambda self: None

    def clear(self):
        return _cIceBRGpy.pair_bin_summary_clear(self)

    def fixbad(self):
        return _cIceBRGpy.pair_bin_summary_fixbad(self)

    def pair_count(self):
        return _cIceBRGpy.pair_bin_summary_pair_count(self)

    def shear_pair_count(self):
        return _cIceBRGpy.pair_bin_summary_shear_pair_count(self)

    def magf_pair_count(self):
        return _cIceBRGpy.pair_bin_summary_magf_pair_count(self)

    def effective_pair_count(self):
        return _cIceBRGpy.pair_bin_summary_effective_pair_count(self)

    def shear_effective_pair_count(self):
        return _cIceBRGpy.pair_bin_summary_shear_effective_pair_count(self)

    def sum_of_weights(self):
        return _cIceBRGpy.pair_bin_summary_sum_of_weights(self)

    def shear_sum_of_weights(self):
        return _cIceBRGpy.pair_bin_summary_shear_sum_of_weights(self)

    def magf_sum_of_weights(self):
        return _cIceBRGpy.pair_bin_summary_magf_sum_of_weights(self)

    def sum_of_square_weights(self):
        return _cIceBRGpy.pair_bin_summary_sum_of_square_weights(self)

    def shear_sum_of_square_weights(self):
        return _cIceBRGpy.pair_bin_summary_shear_sum_of_square_weights(self)

    def magf_sum_of_square_weights(self):
        return _cIceBRGpy.pair_bin_summary_magf_sum_of_square_weights(self)

    def R_min(self):
        return _cIceBRGpy.pair_bin_summary_R_min(self)

    def R_max(self):
        return _cIceBRGpy.pair_bin_summary_R_max(self)

    def R_mid(self):
        return _cIceBRGpy.pair_bin_summary_R_mid(self)

    def R_amid(self):
        return _cIceBRGpy.pair_bin_summary_R_amid(self)

    def R_mean(self):
        return _cIceBRGpy.pair_bin_summary_R_mean(self)

    def shear_R_mean(self):
        return _cIceBRGpy.pair_bin_summary_shear_R_mean(self)

    def magf_R_mean(self):
        return _cIceBRGpy.pair_bin_summary_magf_R_mean(self)

    def m_min(self):
        return _cIceBRGpy.pair_bin_summary_m_min(self)

    def m_max(self):
        return _cIceBRGpy.pair_bin_summary_m_max(self)

    def m_mid(self):
        return _cIceBRGpy.pair_bin_summary_m_mid(self)

    def lens_m_mean(self):
        return _cIceBRGpy.pair_bin_summary_lens_m_mean(self)

    def shear_lens_m_mean(self):
        return _cIceBRGpy.pair_bin_summary_shear_lens_m_mean(self)

    def magf_lens_m_mean(self):
        return _cIceBRGpy.pair_bin_summary_magf_lens_m_mean(self)

    def z_min(self):
        return _cIceBRGpy.pair_bin_summary_z_min(self)

    def z_max(self):
        return _cIceBRGpy.pair_bin_summary_z_max(self)

    def z_mid(self):
        return _cIceBRGpy.pair_bin_summary_z_mid(self)

    def lens_z_mean(self):
        return _cIceBRGpy.pair_bin_summary_lens_z_mean(self)

    def shear_lens_z_mean(self):
        return _cIceBRGpy.pair_bin_summary_shear_lens_z_mean(self)

    def magf_lens_z_mean(self):
        return _cIceBRGpy.pair_bin_summary_magf_lens_z_mean(self)

    def source_z_mean(self):
        return _cIceBRGpy.pair_bin_summary_source_z_mean(self)

    def shear_source_z_mean(self):
        return _cIceBRGpy.pair_bin_summary_shear_source_z_mean(self)

    def magf_source_z_mean(self):
        return _cIceBRGpy.pair_bin_summary_magf_source_z_mean(self)

    def mag_min(self):
        return _cIceBRGpy.pair_bin_summary_mag_min(self)

    def mag_max(self):
        return _cIceBRGpy.pair_bin_summary_mag_max(self)

    def mag_mid(self):
        return _cIceBRGpy.pair_bin_summary_mag_mid(self)

    def lens_mag_mean(self):
        return _cIceBRGpy.pair_bin_summary_lens_mag_mean(self)

    def shear_lens_mag_mean(self):
        return _cIceBRGpy.pair_bin_summary_shear_lens_mag_mean(self)

    def magf_lens_mag_mean(self):
        return _cIceBRGpy.pair_bin_summary_magf_lens_mag_mean(self)

    def shear_sigma_crit(self):
        return _cIceBRGpy.pair_bin_summary_shear_sigma_crit(self)

    def magf_sigma_crit(self):
        return _cIceBRGpy.pair_bin_summary_magf_sigma_crit(self)

    def delta_Sigma_t_mean(self):
        return _cIceBRGpy.pair_bin_summary_delta_Sigma_t_mean(self)

    def delta_Sigma_x_mean(self):
        return _cIceBRGpy.pair_bin_summary_delta_Sigma_x_mean(self)

    def delta_Sigma_t_mean_square(self):
        return _cIceBRGpy.pair_bin_summary_delta_Sigma_t_mean_square(self)

    def delta_Sigma_x_mean_square(self):
        return _cIceBRGpy.pair_bin_summary_delta_Sigma_x_mean_square(self)

    def delta_Sigma_t_std(self):
        return _cIceBRGpy.pair_bin_summary_delta_Sigma_t_std(self)

    def delta_Sigma_x_std(self):
        return _cIceBRGpy.pair_bin_summary_delta_Sigma_x_std(self)

    def delta_Sigma_t_stderr(self):
        return _cIceBRGpy.pair_bin_summary_delta_Sigma_t_stderr(self)

    def delta_Sigma_x_stderr(self):
        return _cIceBRGpy.pair_bin_summary_delta_Sigma_x_stderr(self)

    def gamma_t_mean(self):
        return _cIceBRGpy.pair_bin_summary_gamma_t_mean(self)

    def gamma_x_mean(self):
        return _cIceBRGpy.pair_bin_summary_gamma_x_mean(self)

    def gamma_mean(self):
        return _cIceBRGpy.pair_bin_summary_gamma_mean(self)

    def gamma_mean_square(self):
        return _cIceBRGpy.pair_bin_summary_gamma_mean_square(self)

    def gamma_t_stderr(self):
        return _cIceBRGpy.pair_bin_summary_gamma_t_stderr(self)

    def gamma_x_stderr(self):
        return _cIceBRGpy.pair_bin_summary_gamma_x_stderr(self)

    def gamma_stderr(self):
        return _cIceBRGpy.pair_bin_summary_gamma_stderr(self)

    def gamma_square_stderr(self):
        return _cIceBRGpy.pair_bin_summary_gamma_square_stderr(self)

    def model_delta_Sigma_t(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_delta_Sigma_t(self, *args)

    def model_gamma_t(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_gamma_t(self, *args)

    def model_1h_delta_Sigma_t(self, MLratio_1h=50.):
        return _cIceBRGpy.pair_bin_summary_model_1h_delta_Sigma_t(self, MLratio_1h)

    def model_1h_gamma_t(self, MLratio_1h=50.):
        return _cIceBRGpy.pair_bin_summary_model_1h_gamma_t(self, MLratio_1h)

    def model_offset_delta_Sigma_t(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_offset_delta_Sigma_t(self, *args)

    def model_offset_gamma_t(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_offset_gamma_t(self, *args)

    def area_per_lens(self):
        return _cIceBRGpy.pair_bin_summary_area_per_lens(self)

    def area(self):
        return _cIceBRGpy.pair_bin_summary_area(self)

    def num_lenses(self):
        return _cIceBRGpy.pair_bin_summary_num_lenses(self)

    def magf_effective_num_lenses(self):
        return _cIceBRGpy.pair_bin_summary_magf_effective_num_lenses(self)

    def magf_num_lenses(self):
        return _cIceBRGpy.pair_bin_summary_magf_num_lenses(self)

    def mu_hat(self):
        return _cIceBRGpy.pair_bin_summary_mu_hat(self)

    def mu_square_hat(self):
        return _cIceBRGpy.pair_bin_summary_mu_square_hat(self)

    def mu_W(self):
        return _cIceBRGpy.pair_bin_summary_mu_W(self)

    def mu_std(self):
        return _cIceBRGpy.pair_bin_summary_mu_std(self)

    def mu_stderr(self):
        return _cIceBRGpy.pair_bin_summary_mu_stderr(self)

    def kappa(self):
        return _cIceBRGpy.pair_bin_summary_kappa(self)

    def kappa_stderr(self):
        return _cIceBRGpy.pair_bin_summary_kappa_stderr(self)

    def Sigma(self):
        return _cIceBRGpy.pair_bin_summary_Sigma(self)

    def Sigma_stderr(self):
        return _cIceBRGpy.pair_bin_summary_Sigma_stderr(self)

    def model_mu(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_mu(self, *args)

    def model_kappa(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_kappa(self, *args)

    def model_Sigma(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_Sigma(self, *args)

    def model_1h_mu(self, MLratio_1h=50.):
        return _cIceBRGpy.pair_bin_summary_model_1h_mu(self, MLratio_1h)

    def model_1h_kappa(self, MLratio_1h=50.):
        return _cIceBRGpy.pair_bin_summary_model_1h_kappa(self, MLratio_1h)

    def model_1h_Sigma(self, MLratio_1h=50.):
        return _cIceBRGpy.pair_bin_summary_model_1h_Sigma(self, MLratio_1h)

    def model_offset_mu(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_offset_mu(self, *args)

    def model_offset_kappa(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_offset_kappa(self, *args)

    def model_offset_Sigma(self, *args):
        return _cIceBRGpy.pair_bin_summary_model_offset_Sigma(self, *args)

    def __iadd__(self, other):
        return _cIceBRGpy.pair_bin_summary___iadd__(self, other)

    def __add__(self, other):
        return _cIceBRGpy.pair_bin_summary___add__(self, other)

    def save(self, *args):
        return _cIceBRGpy.pair_bin_summary_save(self, *args)

    def load(self, *args):
        return _cIceBRGpy.pair_bin_summary_load(self, *args)
pair_bin_summary_swigregister = _cIceBRGpy.pair_bin_summary_swigregister
pair_bin_summary_swigregister(pair_bin_summary)
default_mass = cvar.default_mass

class lens_id(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lens_id, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lens_id, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _cIceBRGpy.lens_id_id_set
    __swig_getmethods__["id"] = _cIceBRGpy.lens_id_id_get
    if _newclass:
        id = _swig_property(_cIceBRGpy.lens_id_id_get, _cIceBRGpy.lens_id_id_set)
    __swig_setmethods__["m"] = _cIceBRGpy.lens_id_m_set
    __swig_getmethods__["m"] = _cIceBRGpy.lens_id_m_get
    if _newclass:
        m = _swig_property(_cIceBRGpy.lens_id_m_get, _cIceBRGpy.lens_id_m_set)
    __swig_setmethods__["z"] = _cIceBRGpy.lens_id_z_set
    __swig_getmethods__["z"] = _cIceBRGpy.lens_id_z_get
    if _newclass:
        z = _swig_property(_cIceBRGpy.lens_id_z_get, _cIceBRGpy.lens_id_z_set)
    __swig_setmethods__["mag"] = _cIceBRGpy.lens_id_mag_set
    __swig_getmethods__["mag"] = _cIceBRGpy.lens_id_mag_get
    if _newclass:
        mag = _swig_property(_cIceBRGpy.lens_id_mag_get, _cIceBRGpy.lens_id_mag_set)
    __swig_setmethods__["weight"] = _cIceBRGpy.lens_id_weight_set
    __swig_getmethods__["weight"] = _cIceBRGpy.lens_id_weight_get
    if _newclass:
        weight = _swig_property(_cIceBRGpy.lens_id_weight_get, _cIceBRGpy.lens_id_weight_set)
    __swig_setmethods__["unmasked_frac_bin_limits"] = _cIceBRGpy.lens_id_unmasked_frac_bin_limits_set
    __swig_getmethods__["unmasked_frac_bin_limits"] = _cIceBRGpy.lens_id_unmasked_frac_bin_limits_get
    if _newclass:
        unmasked_frac_bin_limits = _swig_property(_cIceBRGpy.lens_id_unmasked_frac_bin_limits_get, _cIceBRGpy.lens_id_unmasked_frac_bin_limits_set)
    __swig_setmethods__["unmasked_fracs"] = _cIceBRGpy.lens_id_unmasked_fracs_set
    __swig_getmethods__["unmasked_fracs"] = _cIceBRGpy.lens_id_unmasked_fracs_get
    if _newclass:
        unmasked_fracs = _swig_property(_cIceBRGpy.lens_id_unmasked_fracs_get, _cIceBRGpy.lens_id_unmasked_fracs_set)

    def unmasked_frac(self, R_proj):
        return _cIceBRGpy.lens_id_unmasked_frac(self, R_proj)

    def __init__(self, id, m, z, mag, unmasked_frac_bin_limits, unmasked_fracs, weight=1):
        this = _cIceBRGpy.new_lens_id(id, m, z, mag, unmasked_frac_bin_limits, unmasked_fracs, weight)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_lens_id
    __del__ = lambda self: None
lens_id_swigregister = _cIceBRGpy.lens_id_swigregister
lens_id_swigregister(lens_id)

class pair_bin(pair_bin_summary):
    __swig_setmethods__ = {}
    for _s in [pair_bin_summary]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_bin, name, value)
    __swig_getmethods__ = {}
    for _s in [pair_bin_summary]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, pair_bin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cIceBRGpy.new_pair_bin(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_pair_bin
    __del__ = lambda self: None

    def set_z_buffer(self, new_z_buffer):
        return _cIceBRGpy.pair_bin_set_z_buffer(self, new_z_buffer)

    def z_buffer(self):
        return _cIceBRGpy.pair_bin_z_buffer(self)

    def add_pair(self, new_pair):
        return _cIceBRGpy.pair_bin_add_pair(self, new_pair)

    def add_lens(self, lens):
        return _cIceBRGpy.pair_bin_add_lens(self, lens)

    def clear(self):
        return _cIceBRGpy.pair_bin_clear(self)

    def pair_count(self):
        return _cIceBRGpy.pair_bin_pair_count(self)

    def shear_pair_count(self):
        return _cIceBRGpy.pair_bin_shear_pair_count(self)

    def magf_pair_count(self):
        return _cIceBRGpy.pair_bin_magf_pair_count(self)

    def effective_pair_count(self):
        return _cIceBRGpy.pair_bin_effective_pair_count(self)

    def shear_effective_pair_count(self):
        return _cIceBRGpy.pair_bin_shear_effective_pair_count(self)

    def sum_of_weights(self):
        return _cIceBRGpy.pair_bin_sum_of_weights(self)

    def shear_sum_of_weights(self):
        return _cIceBRGpy.pair_bin_shear_sum_of_weights(self)

    def magf_sum_of_weights(self):
        return _cIceBRGpy.pair_bin_magf_sum_of_weights(self)

    def sum_of_square_weights(self):
        return _cIceBRGpy.pair_bin_sum_of_square_weights(self)

    def shear_sum_of_square_weights(self):
        return _cIceBRGpy.pair_bin_shear_sum_of_square_weights(self)

    def magf_sum_of_square_weights(self):
        return _cIceBRGpy.pair_bin_magf_sum_of_square_weights(self)

    def num_lenses(self):
        return _cIceBRGpy.pair_bin_num_lenses(self)

    def magf_num_lenses(self):
        return _cIceBRGpy.pair_bin_magf_num_lenses(self)

    def R_mean(self):
        return _cIceBRGpy.pair_bin_R_mean(self)

    def shear_R_mean(self):
        return _cIceBRGpy.pair_bin_shear_R_mean(self)

    def magf_R_mean(self):
        return _cIceBRGpy.pair_bin_magf_R_mean(self)

    def lens_m_mean(self):
        return _cIceBRGpy.pair_bin_lens_m_mean(self)

    def shear_lens_m_mean(self):
        return _cIceBRGpy.pair_bin_shear_lens_m_mean(self)

    def magf_lens_m_mean(self):
        return _cIceBRGpy.pair_bin_magf_lens_m_mean(self)

    def lens_z_mean(self):
        return _cIceBRGpy.pair_bin_lens_z_mean(self)

    def shear_lens_z_mean(self):
        return _cIceBRGpy.pair_bin_shear_lens_z_mean(self)

    def magf_lens_z_mean(self):
        return _cIceBRGpy.pair_bin_magf_lens_z_mean(self)

    def lens_mag_mean(self):
        return _cIceBRGpy.pair_bin_lens_mag_mean(self)

    def shear_lens_mag_mean(self):
        return _cIceBRGpy.pair_bin_shear_lens_mag_mean(self)

    def magf_lens_mag_mean(self):
        return _cIceBRGpy.pair_bin_magf_lens_mag_mean(self)

    def source_z_mean(self):
        return _cIceBRGpy.pair_bin_source_z_mean(self)

    def shear_source_z_mean(self):
        return _cIceBRGpy.pair_bin_shear_source_z_mean(self)

    def magf_source_z_mean(self):
        return _cIceBRGpy.pair_bin_magf_source_z_mean(self)

    def unmasked_frac(self):
        return _cIceBRGpy.pair_bin_unmasked_frac(self)

    def area(self):
        return _cIceBRGpy.pair_bin_area(self)

    def delta_Sigma_t_mean(self):
        return _cIceBRGpy.pair_bin_delta_Sigma_t_mean(self)

    def delta_Sigma_x_mean(self):
        return _cIceBRGpy.pair_bin_delta_Sigma_x_mean(self)

    def delta_Sigma_t_mean_square(self):
        return _cIceBRGpy.pair_bin_delta_Sigma_t_mean_square(self)

    def delta_Sigma_x_mean_square(self):
        return _cIceBRGpy.pair_bin_delta_Sigma_x_mean_square(self)

    def delta_Sigma_t_std(self):
        return _cIceBRGpy.pair_bin_delta_Sigma_t_std(self)

    def delta_Sigma_x_std(self):
        return _cIceBRGpy.pair_bin_delta_Sigma_x_std(self)

    def delta_Sigma_t_stderr(self):
        return _cIceBRGpy.pair_bin_delta_Sigma_t_stderr(self)

    def delta_Sigma_x_stderr(self):
        return _cIceBRGpy.pair_bin_delta_Sigma_x_stderr(self)

    def mu_hat(self):
        return _cIceBRGpy.pair_bin_mu_hat(self)

    def mu_square_hat(self):
        return _cIceBRGpy.pair_bin_mu_square_hat(self)

    def mu_W(self):
        return _cIceBRGpy.pair_bin_mu_W(self)
pair_bin_swigregister = _cIceBRGpy.pair_bin_swigregister
pair_bin_swigregister(pair_bin)

class pair_bins_summary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_bins_summary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_bins_summary, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cIceBRGpy.new_pair_bins_summary(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_pair_bins_summary
    __del__ = lambda self: None

    def set_R_limits(self, R_bin_limits):
        return _cIceBRGpy.pair_bins_summary_set_R_limits(self, R_bin_limits)

    def set_m_limits(self, m_bin_limits):
        return _cIceBRGpy.pair_bins_summary_set_m_limits(self, m_bin_limits)

    def set_z_limits(self, z_bin_limits):
        return _cIceBRGpy.pair_bins_summary_set_z_limits(self, z_bin_limits)

    def set_mag_limits(self, mag_bin_limits):
        return _cIceBRGpy.pair_bins_summary_set_mag_limits(self, mag_bin_limits)

    def set_linear_R_limits(self, R_min, R_max, R_bins):
        return _cIceBRGpy.pair_bins_summary_set_linear_R_limits(self, R_min, R_max, R_bins)

    def set_linear_m_limits(self, m_min, m_max, m_bins):
        return _cIceBRGpy.pair_bins_summary_set_linear_m_limits(self, m_min, m_max, m_bins)

    def set_linear_z_limits(self, z_min, z_max, z_bins):
        return _cIceBRGpy.pair_bins_summary_set_linear_z_limits(self, z_min, z_max, z_bins)

    def set_linear_mag_limits(self, mag_min, mag_max, mag_bins):
        return _cIceBRGpy.pair_bins_summary_set_linear_mag_limits(self, mag_min, mag_max, mag_bins)

    def set_log_R_limits(self, R_min, R_max, R_num_bins=1):
        return _cIceBRGpy.pair_bins_summary_set_log_R_limits(self, R_min, R_max, R_num_bins)

    def set_log_m_limits(self, m_min, m_max, m_num_bins=1):
        return _cIceBRGpy.pair_bins_summary_set_log_m_limits(self, m_min, m_max, m_num_bins)

    def set_log_z_limits(self, z_min, z_max, z_num_bins=1):
        return _cIceBRGpy.pair_bins_summary_set_log_z_limits(self, z_min, z_max, z_num_bins)

    def set_log_mag_limits(self, mag_min, mag_max, mag_num_bins=1):
        return _cIceBRGpy.pair_bins_summary_set_log_mag_limits(self, mag_min, mag_max, mag_num_bins)

    def clear_R_limits(self):
        return _cIceBRGpy.pair_bins_summary_clear_R_limits(self)

    def clear_m_limits(self):
        return _cIceBRGpy.pair_bins_summary_clear_m_limits(self)

    def clear_z_limits(self):
        return _cIceBRGpy.pair_bins_summary_clear_z_limits(self)

    def clear_mag_limits(self):
        return _cIceBRGpy.pair_bins_summary_clear_mag_limits(self)

    def set_limits(self, *args):
        return _cIceBRGpy.pair_bins_summary_set_limits(self, *args)

    def set_linear_limits(self, *args):
        return _cIceBRGpy.pair_bins_summary_set_linear_limits(self, *args)

    def set_log_limits(self, *args):
        return _cIceBRGpy.pair_bins_summary_set_log_limits(self, *args)

    def fixbad(self):
        return _cIceBRGpy.pair_bins_summary_fixbad(self)

    def R_limits(self):
        return _cIceBRGpy.pair_bins_summary_R_limits(self)

    def m_limits(self):
        return _cIceBRGpy.pair_bins_summary_m_limits(self)

    def z_limits(self):
        return _cIceBRGpy.pair_bins_summary_z_limits(self)

    def mag_limits(self):
        return _cIceBRGpy.pair_bins_summary_mag_limits(self)

    def valid_limits(self):
        return _cIceBRGpy.pair_bins_summary_valid_limits(self)

    def sort(self):
        return _cIceBRGpy.pair_bins_summary_sort(self)

    def clear(self):
        return _cIceBRGpy.pair_bins_summary_clear(self)

    def pair_bin_summaries(self):
        return _cIceBRGpy.pair_bins_summary_pair_bin_summaries(self)

    def delta_Sigma_t_mean_for_bin(self, *args):
        return _cIceBRGpy.pair_bins_summary_delta_Sigma_t_mean_for_bin(self, *args)

    def delta_Sigma_x_mean_for_bin(self, *args):
        return _cIceBRGpy.pair_bins_summary_delta_Sigma_x_mean_for_bin(self, *args)

    def delta_Sigma_t_std_for_bin(self, *args):
        return _cIceBRGpy.pair_bins_summary_delta_Sigma_t_std_for_bin(self, *args)

    def delta_Sigma_x_std_for_bin(self, *args):
        return _cIceBRGpy.pair_bins_summary_delta_Sigma_x_std_for_bin(self, *args)

    def delta_Sigma_t_stderr_for_bin(self, *args):
        return _cIceBRGpy.pair_bins_summary_delta_Sigma_t_stderr_for_bin(self, *args)

    def delta_Sigma_x_stderr_for_bin(self, *args):
        return _cIceBRGpy.pair_bins_summary_delta_Sigma_x_stderr_for_bin(self, *args)

    def print_bin_data(self, *args):
        return _cIceBRGpy.pair_bins_summary_print_bin_data(self, *args)

    def __iadd__(self, other):
        return _cIceBRGpy.pair_bins_summary___iadd__(self, other)

    def __add__(self, other):
        return _cIceBRGpy.pair_bins_summary___add__(self, other)

    def save(self, *args):
        return _cIceBRGpy.pair_bins_summary_save(self, *args)

    def load(self, *args):
        return _cIceBRGpy.pair_bins_summary_load(self, *args)
pair_bins_summary_swigregister = _cIceBRGpy.pair_bins_summary_swigregister
pair_bins_summary_swigregister(pair_bins_summary)

class source_obj(sky_obj):
    __swig_setmethods__ = {}
    for _s in [sky_obj]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, source_obj, name, value)
    __swig_getmethods__ = {}
    for _s in [sky_obj]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, source_obj, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cIceBRGpy.delete_source_obj
    __del__ = lambda self: None

    def source_obj_clone(self):
        return _cIceBRGpy.source_obj_source_obj_clone(self)

    def gamma_1(self):
        return _cIceBRGpy.source_obj_gamma_1(self)

    def gamma_2(self):
        return _cIceBRGpy.source_obj_gamma_2(self)

    def kappa(self):
        return _cIceBRGpy.source_obj_kappa(self)

    def set_gamma_1(self, new_gamma_1):
        return _cIceBRGpy.source_obj_set_gamma_1(self, new_gamma_1)

    def set_gamma_2(self, new_gamma_2):
        return _cIceBRGpy.source_obj_set_gamma_2(self, new_gamma_2)

    def set_kappa(self, new_kappa):
        return _cIceBRGpy.source_obj_set_kappa(self, new_kappa)
source_obj_swigregister = _cIceBRGpy.source_obj_swigregister
source_obj_swigregister(source_obj)

class lens_source_pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lens_source_pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lens_source_pair, name)
    __repr__ = _swig_repr

    def store_data(self):
        return _cIceBRGpy.lens_source_pair_store_data(self)

    def __init__(self, *args):
        this = _cIceBRGpy.new_lens_source_pair(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_lens_source_pair
    __del__ = lambda self: None

    def set_lens(self, lens_ptr, make_clone=False):
        return _cIceBRGpy.lens_source_pair_set_lens(self, lens_ptr, make_clone)

    def set_source(self, source_ptr, make_clone=False):
        return _cIceBRGpy.lens_source_pair_set_source(self, source_ptr, make_clone)

    def set_weight_pair(self, new_weight_pair):
        return _cIceBRGpy.lens_source_pair_set_weight_pair(self, new_weight_pair)

    def lens(self):
        return _cIceBRGpy.lens_source_pair_lens(self)

    def source(self):
        return _cIceBRGpy.lens_source_pair_source(self)

    def z_lens(self):
        return _cIceBRGpy.lens_source_pair_z_lens(self)

    def z_source(self):
        return _cIceBRGpy.lens_source_pair_z_source(self)

    def z_diff(self):
        return _cIceBRGpy.lens_source_pair_z_diff(self)

    def m_lens(self):
        return _cIceBRGpy.lens_source_pair_m_lens(self)

    def id_lens(self):
        return _cIceBRGpy.lens_source_pair_id_lens(self)

    def mag_lens(self):
        return _cIceBRGpy.lens_source_pair_mag_lens(self)

    def mag_source(self):
        return _cIceBRGpy.lens_source_pair_mag_source(self)

    def R_proj(self):
        return _cIceBRGpy.lens_source_pair_R_proj(self)

    def theta(self):
        return _cIceBRGpy.lens_source_pair_theta(self)

    def gamma_t(self):
        return _cIceBRGpy.lens_source_pair_gamma_t(self)

    def gamma_x(self):
        return _cIceBRGpy.lens_source_pair_gamma_x(self)

    def weight_lens(self):
        return _cIceBRGpy.lens_source_pair_weight_lens(self)

    def weight_source(self):
        return _cIceBRGpy.lens_source_pair_weight_source(self)

    def weight_pair(self):
        return _cIceBRGpy.lens_source_pair_weight_pair(self)

    def shear_weight(self):
        return _cIceBRGpy.lens_source_pair_shear_weight(self)

    def mag_weight(self):
        return _cIceBRGpy.lens_source_pair_mag_weight(self)

    def sigma_crit(self):
        return _cIceBRGpy.lens_source_pair_sigma_crit(self)

    def delta_Sigma_t(self):
        return _cIceBRGpy.lens_source_pair_delta_Sigma_t(self)

    def delta_Sigma_x(self):
        return _cIceBRGpy.lens_source_pair_delta_Sigma_x(self)
lens_source_pair_swigregister = _cIceBRGpy.lens_source_pair_swigregister
lens_source_pair_swigregister(lens_source_pair)

class lensing_tNFW_profile_extension(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lensing_tNFW_profile_extension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lensing_tNFW_profile_extension, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cIceBRGpy.new_lensing_tNFW_profile_extension()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_lensing_tNFW_profile_extension
    __del__ = lambda self: None

    def lensing_profile_extension_clone(self):
        return _cIceBRGpy.lensing_tNFW_profile_extension_lensing_profile_extension_clone(self)

    def proj_dens(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_proj_dens(self, R)

    def proj_enc_mass(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_proj_enc_mass(self, R)

    def proj_enc_dens(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_proj_enc_dens(self, R)

    def Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_Delta_Sigma(self, R)

    def quick_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_Delta_Sigma(self, R)

    def offset_Delta_Sigma(self, R, offset_R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_offset_Delta_Sigma(self, R, offset_R)

    def quick_offset_Delta_Sigma(self, R, offset_R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_offset_Delta_Sigma(self, R, offset_R)

    def group_Delta_Sigma(self, R, group_c=2.5):
        return _cIceBRGpy.lensing_tNFW_profile_extension_group_Delta_Sigma(self, R, group_c)

    def semiquick_group_Delta_Sigma(self, R, group_c=2.5):
        return _cIceBRGpy.lensing_tNFW_profile_extension_semiquick_group_Delta_Sigma(self, R, group_c)

    def quick_group_Delta_Sigma(self, R, group_c=2.5):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_group_Delta_Sigma(self, R, group_c)

    def two_halo_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_two_halo_Delta_Sigma(self, R)

    def quick_two_halo_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_two_halo_Delta_Sigma(self, R)

    def shift_factor(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_shift_factor(self, R)

    def shifted_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_shifted_Delta_Sigma(self, R)

    def semiquick_shifted_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_semiquick_shifted_Delta_Sigma(self, R)

    def quick_shifted_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_shifted_Delta_Sigma(self, R)

    def shifted_no_enh_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_shifted_no_enh_Delta_Sigma(self, R)

    def semiquick_shifted_no_enh_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_semiquick_shifted_no_enh_Delta_Sigma(self, R)

    def quick_shifted_no_enh_Delta_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_shifted_no_enh_Delta_Sigma(self, R)

    def Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_Sigma(self, R)

    def quick_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_Sigma(self, R)

    def offset_Sigma(self, R, offset_R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_offset_Sigma(self, R, offset_R)

    def quick_offset_Sigma(self, R, offset_R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_offset_Sigma(self, R, offset_R)

    def group_Sigma(self, R, group_c=2.5):
        return _cIceBRGpy.lensing_tNFW_profile_extension_group_Sigma(self, R, group_c)

    def semiquick_group_Sigma(self, R, group_c=2.5):
        return _cIceBRGpy.lensing_tNFW_profile_extension_semiquick_group_Sigma(self, R, group_c)

    def quick_group_Sigma(self, R, group_c=2.5):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_group_Sigma(self, R, group_c)

    def two_halo_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_two_halo_Sigma(self, R)

    def quick_two_halo_Sigma(self, R):
        return _cIceBRGpy.lensing_tNFW_profile_extension_quick_two_halo_Sigma(self, R)
lensing_tNFW_profile_extension_swigregister = _cIceBRGpy.lensing_tNFW_profile_extension_swigregister
lensing_tNFW_profile_extension_swigregister(lensing_tNFW_profile_extension)

class lensing_tNFW_profile(tNFW_profile, lensing_tNFW_profile_extension):
    __swig_setmethods__ = {}
    for _s in [tNFW_profile, lensing_tNFW_profile_extension]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, lensing_tNFW_profile, name, value)
    __swig_getmethods__ = {}
    for _s in [tNFW_profile, lensing_tNFW_profile_extension]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, lensing_tNFW_profile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cIceBRGpy.new_lensing_tNFW_profile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_lensing_tNFW_profile
    __del__ = lambda self: None

    def density_profile_clone(self):
        return _cIceBRGpy.lensing_tNFW_profile_density_profile_clone(self)

    def tNFW_profile_clone(self):
        return _cIceBRGpy.lensing_tNFW_profile_tNFW_profile_clone(self)
lensing_tNFW_profile_swigregister = _cIceBRGpy.lensing_tNFW_profile_swigregister
lensing_tNFW_profile_swigregister(lensing_tNFW_profile)

class lens_id_lt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lens_id_lt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lens_id_lt, name)
    __repr__ = _swig_repr

    def __call__(self, lens1, lens2):
        return _cIceBRGpy.lens_id_lt___call__(self, lens1, lens2)

    def __init__(self):
        this = _cIceBRGpy.new_lens_id_lt()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_lens_id_lt
    __del__ = lambda self: None
lens_id_lt_swigregister = _cIceBRGpy.lens_id_lt_swigregister
lens_id_lt_swigregister(lens_id_lt)

class pair_binner(pair_bins_summary):
    __swig_setmethods__ = {}
    for _s in [pair_bins_summary]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_binner, name, value)
    __swig_getmethods__ = {}
    for _s in [pair_bins_summary]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, pair_binner, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cIceBRGpy.new_pair_binner(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_pair_binner
    __del__ = lambda self: None

    def set_z_buffer(self, new_z_buffer):
        return _cIceBRGpy.pair_binner_set_z_buffer(self, new_z_buffer)

    def z_buffer(self):
        return _cIceBRGpy.pair_binner_z_buffer(self)

    def binnable(self, lens):
        return _cIceBRGpy.pair_binner_binnable(self, lens)

    def add_pair(self, new_pair):
        return _cIceBRGpy.pair_binner_add_pair(self, new_pair)

    def add_lens_id(self, new_lens_id, m, z, mag, weight=1):
        return _cIceBRGpy.pair_binner_add_lens_id(self, new_lens_id, m, z, mag, weight)

    def clear(self):
        return _cIceBRGpy.pair_binner_clear(self)

    def empty(self):
        return _cIceBRGpy.pair_binner_empty(self)

    def sort(self):
        return _cIceBRGpy.pair_binner_sort(self)

    def delta_Sigma_t_mean_for_bin(self, *args):
        return _cIceBRGpy.pair_binner_delta_Sigma_t_mean_for_bin(self, *args)

    def delta_Sigma_x_mean_for_bin(self, *args):
        return _cIceBRGpy.pair_binner_delta_Sigma_x_mean_for_bin(self, *args)

    def delta_Sigma_t_std_for_bin(self, *args):
        return _cIceBRGpy.pair_binner_delta_Sigma_t_std_for_bin(self, *args)

    def delta_Sigma_x_std_for_bin(self, *args):
        return _cIceBRGpy.pair_binner_delta_Sigma_x_std_for_bin(self, *args)

    def delta_Sigma_t_stderr_for_bin(self, *args):
        return _cIceBRGpy.pair_binner_delta_Sigma_t_stderr_for_bin(self, *args)

    def delta_Sigma_x_stderr_for_bin(self, *args):
        return _cIceBRGpy.pair_binner_delta_Sigma_x_stderr_for_bin(self, *args)
pair_binner_swigregister = _cIceBRGpy.pair_binner_swigregister
pair_binner_swigregister(pair_binner)

class source_galaxy(source_obj, galaxy):
    __swig_setmethods__ = {}
    for _s in [source_obj, galaxy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, source_galaxy, name, value)
    __swig_getmethods__ = {}
    for _s in [source_obj, galaxy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, source_galaxy, name)
    __repr__ = _swig_repr

    def __init__(self, init_ra=0, init_dec=0, init_z=0, init_gamma_1=0, init_gamma_2=0, init_kappa=0, init_mstar=0, init_mag=0, init_weight=1):
        this = _cIceBRGpy.new_source_galaxy(init_ra, init_dec, init_z, init_gamma_1, init_gamma_2, init_kappa, init_mstar, init_mag, init_weight)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cIceBRGpy.delete_source_galaxy
    __del__ = lambda self: None

    def m(self):
        return _cIceBRGpy.source_galaxy_m(self)

    def mag(self):
        return _cIceBRGpy.source_galaxy_mag(self)

    def redshift_obj_clone(self):
        return _cIceBRGpy.source_galaxy_redshift_obj_clone(self)

    def sky_obj_clone(self):
        return _cIceBRGpy.source_galaxy_sky_obj_clone(self)

    def galaxy_clone(self):
        return _cIceBRGpy.source_galaxy_galaxy_clone(self)

    def source_obj_clone(self):
        return _cIceBRGpy.source_galaxy_source_obj_clone(self)
source_galaxy_swigregister = _cIceBRGpy.source_galaxy_swigregister
source_galaxy_swigregister(source_galaxy)

# This file is compatible with both classic and new-style classes.


